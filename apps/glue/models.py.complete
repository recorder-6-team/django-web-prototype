# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Address(models.Model):
    address_key = FixedCharField(db_column='ADDRESS_KEY', primary_key=True, max_length=16)
    address_1 = models.CharField(db_column='ADDRESS_1', max_length=40, blank=True, null=True)
    address_2 = models.CharField(db_column='ADDRESS_2', max_length=40, blank=True, null=True)
    address_3 = models.CharField(db_column='ADDRESS_3', max_length=30, blank=True, null=True)
    address_4 = models.CharField(db_column='ADDRESS_4', max_length=30, blank=True, null=True)
    address_country = models.CharField(db_column='ADDRESS_COUNTRY', max_length=30, blank=True, null=True)
    address_postcode = models.CharField(db_column='ADDRESS_POSTCODE', max_length=10, blank=True, null=True)
    from_vague_date_start = models.IntegerField(db_column='FROM_VAGUE_DATE_START', blank=True, null=True)
    from_vague_date_end = models.IntegerField(db_column='FROM_VAGUE_DATE_END', blank=True, null=True)
    from_vague_date_type = models.CharField(db_column='FROM_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    to_vague_date_start = models.IntegerField(db_column='TO_VAGUE_DATE_START', blank=True, null=True)
    to_vague_date_end = models.IntegerField(db_column='TO_VAGUE_DATE_END', blank=True, null=True)
    to_vague_date_type = models.CharField(db_column='TO_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    preferred = models.BooleanField(db_column='PREFERRED')
    work_address = models.BooleanField(db_column='WORK_ADDRESS')
    name_key = models.ForeignKey('Name', models.DO_NOTHING, db_column='NAME_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ADDRESS'


class AdminArea(models.Model):
    admin_area_key = FixedCharField(db_column='ADMIN_AREA_KEY', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=60)
    admin_type_key = models.ForeignKey('AdminType', models.DO_NOTHING, db_column='ADMIN_TYPE_KEY')
    parent = FixedCharField(db_column='PARENT', max_length=16, blank=True, null=True)
    short_code = models.CharField(db_column='SHORT_CODE', max_length=10, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ADMIN_AREA'


class AdminAreaSources(models.Model):
    source_link_key = FixedCharField(db_column='SOURCE_LINK_KEY', primary_key=True, max_length=16)
    admin_area_key = models.ForeignKey(AdminArea, models.DO_NOTHING, db_column='ADMIN_AREA_KEY')
    source_key = models.ForeignKey('Source', models.DO_NOTHING, db_column='SOURCE_KEY')
    original = models.BooleanField(db_column='ORIGINAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ADMIN_AREA_SOURCES'


class AdminBoundary(models.Model):
    admin_boundary_key = FixedCharField(db_column='ADMIN_BOUNDARY_KEY', primary_key=True, max_length=16)
    date_from = models.DateTimeField(db_column='DATE_FROM', blank=True, null=True)
    date_to = models.DateTimeField(db_column='DATE_TO', blank=True, null=True)
    object_id = models.SmallIntegerField(db_column='OBJECT_ID', blank=True, null=True)
    authority = models.CharField(db_column='AUTHORITY', max_length=50, blank=True, null=True)
    admin_area_key = models.ForeignKey(AdminArea, models.DO_NOTHING, db_column='ADMIN_AREA_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    map_sheet_key = FixedCharField(db_column='MAP_SHEET_KEY', max_length=16, blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ADMIN_BOUNDARY'


class AdminRelation(models.Model):
    admin_relation_key = FixedCharField(db_column='ADMIN_RELATION_KEY', primary_key=True, max_length=16)
    admin_area_key_1 = models.ForeignKey(AdminArea, models.DO_NOTHING, db_column='ADMIN_AREA_KEY_1')
    admin_area_key_2 = models.ForeignKey(AdminArea, models.DO_NOTHING, db_column='ADMIN_AREA_KEY_2')
    relation_1_to_2 = models.CharField(db_column='RELATION_1_TO_2', max_length=25, blank=True, null=True)
    relation_2_to_1 = models.CharField(db_column='RELATION_2_TO_1', max_length=25, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ADMIN_RELATION'


class AdminType(models.Model):
    admin_type_key = FixedCharField(db_column='ADMIN_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=50)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    authority = models.CharField(db_column='AUTHORITY', max_length=100, blank=True, null=True)
    date_from = models.DateTimeField(db_column='DATE_FROM', blank=True, null=True)
    date_to = models.DateTimeField(db_column='DATE_TO', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ADMIN_TYPE'


class Application(models.Model):
    application_key = FixedCharField(db_column='Application_Key', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='Item_Name', max_length=50)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Application'


class ApplicationConceptGroup(models.Model):
    application_key = models.OneToOneField(Application, models.DO_NOTHING, db_column='Application_Key', primary_key=True)
    concept_group_key = models.ForeignKey('ConceptGroup', models.DO_NOTHING, db_column='Concept_Group_Key')

    class Meta:
        managed = False
        db_table = 'Application_Concept_Group'
        unique_together = (('application_key', 'concept_group_key'),)


class Biotope(models.Model):
    biotope_key = FixedCharField(db_column='BIOTOPE_KEY', primary_key=True, max_length=16)
    short_term = models.CharField(db_column='SHORT_TERM', max_length=60, blank=True, null=True)
    full_term = models.CharField(db_column='FULL_TERM', max_length=200)
    term_current = models.BooleanField(db_column='TERM_CURRENT')
    original_code = models.CharField(db_column='ORIGINAL_CODE', max_length=30, blank=True, null=True)
    term_status = models.CharField(db_column='TERM_STATUS', max_length=10, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE'


class BiotopeClassification(models.Model):
    biotope_classification_key = FixedCharField(db_column='BIOTOPE_CLASSIFICATION_KEY', primary_key=True, max_length=16)
    long_name = models.CharField(db_column='LONG_NAME', max_length=200, blank=True, null=True)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=50)
    commissioned_by = models.CharField(db_column='COMMISSIONED_BY', max_length=60, blank=True, null=True)
    created_by = models.CharField(db_column='CREATED_BY', max_length=60, blank=True, null=True)
    created_vague_date_start = models.IntegerField(db_column='CREATED_VAGUE_DATE_START', blank=True, null=True)
    created_vague_date_end = models.IntegerField(db_column='CREATED_VAGUE_DATE_END', blank=True, null=True)
    created_vague_date_type = models.CharField(db_column='CREATED_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    objectives = models.TextField(db_column='OBJECTIVES', blank=True, null=True)
    designation_acronym = models.CharField(db_column='DESIGNATION_ACRONYM', max_length=20, blank=True, null=True)
    bt_cl_type_key = models.ForeignKey('BiotopeClassificationType', models.DO_NOTHING, db_column='BT_CL_TYPE_KEY', blank=True, null=True)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_CLASSIFICATION'


class BiotopeClassificationType(models.Model):
    bt_cl_type_key = FixedCharField(db_column='BT_CL_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_CLASSIFICATION_TYPE'


class BiotopeClassificationVersion(models.Model):
    bt_cl_version_key = FixedCharField(db_column='BT_CL_VERSION_KEY', primary_key=True, max_length=16)
    revision_number = models.SmallIntegerField(db_column='REVISION_NUMBER', blank=True, null=True)
    revision_date = models.DateTimeField(db_column='REVISION_DATE', blank=True, null=True)
    biotope_classification_key = FixedCharField(db_column='BIOTOPE_CLASSIFICATION_KEY', max_length=16)
    version_is_amendment = models.BooleanField(db_column='VERSION_IS_AMENDMENT')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_CLASSIFICATION_VERSION'


class BiotopeDesignation(models.Model):
    biotope_designation_key = FixedCharField(db_column='BIOTOPE_DESIGNATION_KEY', primary_key=True, max_length=16)
    date_from = models.DateTimeField(db_column='DATE_FROM', blank=True, null=True)
    date_to = models.DateTimeField(db_column='DATE_TO', blank=True, null=True)
    status_constraint = models.TextField(db_column='STATUS_CONSTRAINT', blank=True, null=True)
    status_geographic_area = models.TextField(db_column='STATUS_GEOGRAPHIC_AREA', blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    biotope_list_item_key = models.ForeignKey('BiotopeListItem', models.DO_NOTHING, db_column='BIOTOPE_LIST_ITEM_KEY')
    biotope_designation_type_key = models.ForeignKey('BiotopeDesignationType', models.DO_NOTHING, db_column='BIOTOPE_DESIGNATION_TYPE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    source_key = FixedCharField(db_column='SOURCE_KEY', max_length=16, blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_DESIGNATION'


class BiotopeDesignationType(models.Model):
    biotope_designation_type_key = FixedCharField(db_column='BIOTOPE_DESIGNATION_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    controlling_authority = models.CharField(db_column='CONTROLLING_AUTHORITY', max_length=50, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_DESIGNATION_TYPE'


class BiotopeDetermination(models.Model):
    biotope_determination_key = FixedCharField(db_column='BIOTOPE_DETERMINATION_KEY', primary_key=True, max_length=16)
    biotope_list_item_key = models.ForeignKey('BiotopeListItem', models.DO_NOTHING, db_column='BIOTOPE_LIST_ITEM_KEY')
    biotope_occurrence_key = models.ForeignKey('BiotopeOccurrence', models.DO_NOTHING, db_column='BIOTOPE_OCCURRENCE_KEY')
    vague_date_start = models.IntegerField(db_column='VAGUE_DATE_START', blank=True, null=True)
    vague_date_end = models.IntegerField(db_column='VAGUE_DATE_END', blank=True, null=True)
    vague_date_type = models.CharField(db_column='VAGUE_DATE_TYPE', max_length=2)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    preferred = models.BooleanField(db_column='PREFERRED')
    determiner = models.ForeignKey('Name', models.DO_NOTHING, db_column='DETERMINER')
    determination_type_key = models.ForeignKey('DeterminationType', models.DO_NOTHING, db_column='DETERMINATION_TYPE_KEY')
    determiner_role_key = models.ForeignKey('DeterminerRole', models.DO_NOTHING, db_column='DETERMINER_ROLE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    source_key = models.ForeignKey('Source', models.DO_NOTHING, db_column='SOURCE_KEY', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_DETERMINATION'


class BiotopeFact(models.Model):
    biotope_fact_key = FixedCharField(db_column='BIOTOPE_FACT_KEY', primary_key=True, max_length=16)
    biotope_key = models.ForeignKey(Biotope, models.DO_NOTHING, db_column='BIOTOPE_KEY', blank=True, null=True)
    type = models.CharField(db_column='TYPE', max_length=1, blank=True, null=True)
    data = models.TextField(db_column='DATA', blank=True, null=True)
    fact_vague_date_start = models.IntegerField(db_column='FACT_VAGUE_DATE_START', blank=True, null=True)
    fact_vague_date_end = models.IntegerField(db_column='FACT_VAGUE_DATE_END', blank=True, null=True)
    fact_vague_date_type = models.CharField(db_column='FACT_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    title = models.CharField(db_column='TITLE', max_length=50, blank=True, null=True)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    source_key = FixedCharField(db_column='SOURCE_KEY', max_length=16, blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_FACT'


class BiotopeListItem(models.Model):
    biotope_list_item_key = FixedCharField(db_column='BIOTOPE_LIST_ITEM_KEY', primary_key=True, max_length=16)
    sort_code = models.SmallIntegerField(db_column='SORT_CODE')
    biotope_key = models.ForeignKey(Biotope, models.DO_NOTHING, db_column='BIOTOPE_KEY')
    parent = models.ForeignKey('self', models.DO_NOTHING, db_column='PARENT', blank=True, null=True)
    bt_cl_version_key = models.ForeignKey(BiotopeClassificationVersion, models.DO_NOTHING, db_column='BT_CL_VERSION_KEY', blank=True, null=True)
    bt_cl_version_to = FixedCharField(db_column='BT_CL_VERSION_TO', max_length=16, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_LIST_ITEM'


class BiotopeOccurrence(models.Model):
    biotope_occurrence_key = FixedCharField(db_column='BIOTOPE_OCCURRENCE_KEY', primary_key=True, max_length=16)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    digitised = models.BooleanField(db_column='DIGITISED')
    verified = models.SmallIntegerField(db_column='VERIFIED')
    checked = models.BooleanField(db_column='CHECKED')
    checked_by = FixedCharField(db_column='CHECKED_BY', max_length=16, blank=True, null=True)
    checked_date = models.DateTimeField(db_column='CHECKED_DATE', blank=True, null=True)
    surveyors_ref = models.CharField(db_column='SURVEYORS_REF', max_length=30, blank=True, null=True)
    sample_key = models.ForeignKey('Sample', models.DO_NOTHING, db_column='SAMPLE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_OCCURRENCE'


class BiotopeOccurrenceData(models.Model):
    biotope_occurrence_data_key = FixedCharField(db_column='BIOTOPE_OCCURRENCE_DATA_KEY', primary_key=True, max_length=16)
    biotope_occurrence_key = models.ForeignKey(BiotopeOccurrence, models.DO_NOTHING, db_column='BIOTOPE_OCCURRENCE_KEY')
    data = models.CharField(db_column='DATA', max_length=20)
    accuracy = models.CharField(db_column='ACCURACY', max_length=20, blank=True, null=True)
    measurement_qualifier_key = models.ForeignKey('MeasurementQualifier', models.DO_NOTHING, db_column='MEASUREMENT_QUALIFIER_KEY')
    measurement_unit_key = models.ForeignKey('MeasurementUnit', models.DO_NOTHING, db_column='MEASUREMENT_UNIT_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_OCCURRENCE_DATA'


class BiotopeOccurrenceSources(models.Model):
    source_link_key = FixedCharField(db_column='SOURCE_LINK_KEY', primary_key=True, max_length=16)
    biotope_occurrence_key = models.ForeignKey(BiotopeOccurrence, models.DO_NOTHING, db_column='BIOTOPE_OCCURRENCE_KEY')
    source_key = models.ForeignKey('Source', models.DO_NOTHING, db_column='SOURCE_KEY')
    original = models.BooleanField(db_column='ORIGINAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_OCCURRENCE_SOURCES'


class BiotopeRelation(models.Model):
    biotope_relation_key = FixedCharField(db_column='BIOTOPE_RELATION_KEY', primary_key=True, max_length=16)
    biotope_list_item_key = models.ForeignKey(BiotopeListItem, models.DO_NOTHING, db_column='BIOTOPE_LIST_ITEM_KEY')
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_RELATION'


class BiotopeRelationAdminArea(models.Model):
    admin_area_key = models.OneToOneField(AdminArea, models.DO_NOTHING, db_column='ADMIN_AREA_KEY', primary_key=True)
    biotope_relation_key = models.ForeignKey(BiotopeRelation, models.DO_NOTHING, db_column='BIOTOPE_RELATION_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')

    class Meta:
        managed = False
        db_table = 'BIOTOPE_RELATION_ADMIN_AREA'
        unique_together = (('admin_area_key', 'biotope_relation_key'),)


class BiotopeRelationJoin(models.Model):
    biotope_relation_key = models.OneToOneField(BiotopeRelation, models.DO_NOTHING, db_column='BIOTOPE_RELATION_KEY', primary_key=True)
    biotope_list_item_key = models.ForeignKey(BiotopeListItem, models.DO_NOTHING, db_column='BIOTOPE_LIST_ITEM_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')

    class Meta:
        managed = False
        db_table = 'BIOTOPE_RELATION_JOIN'
        unique_together = (('biotope_relation_key', 'biotope_list_item_key'),)


class BiotopeSources(models.Model):
    source_link_key = FixedCharField(db_column='SOURCE_LINK_KEY', primary_key=True, max_length=16)
    biotope_key = models.ForeignKey(Biotope, models.DO_NOTHING, db_column='BIOTOPE_KEY')
    source_key = models.ForeignKey('Source', models.DO_NOTHING, db_column='SOURCE_KEY')
    original = models.BooleanField(db_column='ORIGINAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'BIOTOPE_SOURCES'


class BaseMap(models.Model):
    base_map_key = FixedCharField(db_column='Base_Map_Key', primary_key=True, max_length=16)
    original_filename = models.CharField(db_column='Original_Filename', max_length=100)
    spatial_system = models.CharField(db_column='Spatial_System', max_length=4)
    display_name = models.CharField(db_column='Display_Name', max_length=100)
    reset_index = models.IntegerField(db_column='Reset_Index')
    original_filename_before_reset = models.CharField(db_column='Original_FileName_Before_Reset', max_length=100, blank=True, null=True)
    spatial_system_before_reset = models.CharField(db_column='Spatial_System_Before_Reset', max_length=4, blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Base_Map'


class Communication(models.Model):
    communication_key = FixedCharField(db_column='COMMUNICATION_KEY', primary_key=True, max_length=16)
    content = models.TextField(db_column='CONTENT', blank=True, null=True)
    file_ref = models.CharField(db_column='FILE_REF', max_length=20, blank=True, null=True)
    name_key_1 = models.ForeignKey('Name', models.DO_NOTHING, db_column='NAME_KEY_1')
    name_key_2 = models.ForeignKey('Name', models.DO_NOTHING, db_column='NAME_KEY_2')
    communication_type = models.CharField(db_column='COMMUNICATION_TYPE', max_length=20)
    vague_date_start = models.IntegerField(db_column='VAGUE_DATE_START', blank=True, null=True)
    vague_date_end = models.IntegerField(db_column='VAGUE_DATE_END', blank=True, null=True)
    vague_date_type = models.CharField(db_column='VAGUE_DATE_TYPE', max_length=2)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'COMMUNICATION'


class ContactNumber(models.Model):
    contact_number_key = FixedCharField(db_column='CONTACT_NUMBER_KEY', primary_key=True, max_length=16)
    prefix = models.CharField(db_column='PREFIX', max_length=10, blank=True, null=True)
    number = models.CharField(db_column='NUMBER', max_length=50, blank=True, null=True)
    preferred = models.BooleanField(db_column='PREFERRED')
    constraints = models.TextField(db_column='CONSTRAINTS', blank=True, null=True)
    name_key = models.ForeignKey('Name', models.DO_NOTHING, db_column='NAME_KEY')
    contact_number_type = models.CharField(db_column='CONTACT_NUMBER_TYPE', max_length=20)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'CONTACT_NUMBER'


class ComputerMap(models.Model):
    computer_map_key = FixedCharField(db_column='Computer_Map_Key', primary_key=True, max_length=16)
    computer_id = FixedCharField(db_column='Computer_ID', max_length=16)
    base_map_key = models.ForeignKey(BaseMap, models.DO_NOTHING, db_column='Base_Map_Key')
    reset_index = models.IntegerField(db_column='Reset_Index')
    default_map = models.BooleanField(db_column='Default_Map', blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)
    object_sheet_folder = models.CharField(db_column='Object_Sheet_Folder', max_length=200, blank=True, null=True)
    master = models.BooleanField(db_column='Master', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Computer_Map'


class Concept(models.Model):
    concept_key = FixedCharField(db_column='Concept_Key', primary_key=True, max_length=16)
    term_key = models.ForeignKey('Term', models.DO_NOTHING, db_column='Term_Key')
    concept_group_key = models.ForeignKey('ConceptGroup', models.DO_NOTHING, db_column='Concept_Group_Key')
    term_version_key = models.ForeignKey('TermVersion', models.DO_NOTHING, db_column='Term_Version_Key', blank=True, null=True)
    list_preferred = models.BooleanField(db_column='List_Preferred')
    is_current = models.BooleanField(db_column='Is_Current')
    preferred = models.BooleanField(db_column='Preferred')
    concept_rank_key = models.ForeignKey('ConceptRank', models.DO_NOTHING, db_column='Concept_Rank_Key', blank=True, null=True)
    name_type_concept_key = models.ForeignKey('self', models.DO_NOTHING, db_column='Name_Type_Concept_Key')
    meaning_key = models.ForeignKey('Meaning', models.DO_NOTHING, db_column='Meaning_Key')
    author_copy = models.CharField(db_column='Author_Copy', max_length=100, blank=True, null=True)
    sort_code = models.IntegerField(db_column='Sort_Code', blank=True, null=True)
    list_code = models.CharField(db_column='List_Code', max_length=50, blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Concept'


class ConceptDesignation(models.Model):
    concept_designation_key = FixedCharField(db_column='Concept_Designation_Key', primary_key=True, max_length=16)
    concept_key = models.ForeignKey(Concept, models.DO_NOTHING, db_column='Concept_Key')
    designation_type_concept_key = models.ForeignKey(Concept, models.DO_NOTHING, db_column='Designation_Type_Concept_Key')
    from_vague_date_start = models.IntegerField(db_column='From_Vague_Date_Start', blank=True, null=True)
    from_vague_date_end = models.IntegerField(db_column='From_Vague_Date_End', blank=True, null=True)
    from_vague_date_type = models.CharField(db_column='From_Vague_Date_Type', max_length=2)
    to_vague_date_start = models.IntegerField(db_column='To_Vague_Date_Start', blank=True, null=True)
    to_vague_date_end = models.IntegerField(db_column='To_Vague_Date_End', blank=True, null=True)
    to_vague_date_type = models.CharField(db_column='To_Vague_Date_Type', max_length=2, blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Concept_Designation'


class ConceptGroup(models.Model):
    concept_group_key = FixedCharField(db_column='Concept_Group_Key', primary_key=True, max_length=16)
    local_domain_key = models.ForeignKey('LocalDomain', models.DO_NOTHING, db_column='Local_Domain_Key')
    item_name = models.CharField(db_column='Item_Name', max_length=100)
    authority = models.CharField(db_column='Authority', max_length=100, blank=True, null=True)
    url = models.CharField(db_column='Url', max_length=255, blank=True, null=True)
    hierarchy_relation_type_key = models.ForeignKey('ThesaurusRelationType', models.DO_NOTHING, db_column='Hierarchy_Relation_Type_Key', blank=True, null=True)
    last_sequence_number = FixedCharField(db_column='Last_Sequence_Number', max_length=8, blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Concept_Group'


class ConceptGroupVersion(models.Model):
    concept_group_version_key = FixedCharField(db_column='Concept_Group_Version_Key', primary_key=True, max_length=16)
    concept_group_key = models.ForeignKey(ConceptGroup, models.DO_NOTHING, db_column='Concept_Group_Key')
    version = models.CharField(db_column='Version', max_length=100)
    sequence = models.IntegerField(db_column='Sequence')
    from_vague_date_start = models.IntegerField(db_column='From_Vague_Date_Start', blank=True, null=True)
    from_vague_date_end = models.IntegerField(db_column='From_Vague_Date_End', blank=True, null=True)
    from_vague_date_type = models.CharField(db_column='From_Vague_Date_Type', max_length=2)
    to_vague_date_start = models.IntegerField(db_column='To_Vague_Date_Start', blank=True, null=True)
    to_vague_date_end = models.IntegerField(db_column='To_Vague_Date_End', blank=True, null=True)
    to_vague_date_type = models.CharField(db_column='To_Vague_Date_Type', max_length=2, blank=True, null=True)
    acq_vague_date_start = models.IntegerField(db_column='Acq_Vague_Date_Start', blank=True, null=True)
    acq_vague_date_end = models.IntegerField(db_column='Acq_Vague_Date_End', blank=True, null=True)
    acq_vague_date_type = models.CharField(db_column='Acq_Vague_Date_Type', max_length=2)
    url = models.CharField(db_column='Url', max_length=255, blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_Id', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_Id', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Concept_Group_Version'


class ConceptHistory(models.Model):
    concept_history_key = FixedCharField(db_column='Concept_History_Key', primary_key=True, max_length=16)
    concept_key = models.ForeignKey(Concept, models.DO_NOTHING, db_column='Concept_Key')
    concept_group_version_from = models.ForeignKey(ConceptGroupVersion, models.DO_NOTHING, db_column='Concept_Group_Version_From', blank=True, null=True)
    concept_group_version_to = models.ForeignKey(ConceptGroupVersion, models.DO_NOTHING, db_column='Concept_Group_Version_To', blank=True, null=True)
    from_vague_date_start = models.IntegerField(db_column='From_Vague_Date_Start', blank=True, null=True)
    from_vague_date_end = models.IntegerField(db_column='From_Vague_Date_End', blank=True, null=True)
    from_vague_date_type = models.CharField(db_column='From_Vague_Date_Type', max_length=2, blank=True, null=True)
    to_vague_date_start = models.IntegerField(db_column='To_Vague_Date_Start', blank=True, null=True)
    to_vague_date_end = models.IntegerField(db_column='To_Vague_Date_End', blank=True, null=True)
    to_vague_date_type = models.CharField(db_column='To_Vague_Date_Type', max_length=2, blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Concept_History'


class ConceptLineage(models.Model):
    concept_key = models.OneToOneField(Concept, models.DO_NOTHING, db_column='Concept_Key', primary_key=True)
    lineage_id = models.IntegerField(db_column='Lineage_ID')
    lineage = models.CharField(db_column='Lineage', max_length=900)
    last_sequence_number = FixedCharField(db_column='Last_Sequence_Number', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Concept_Lineage'
        unique_together = (('concept_key', 'lineage_id'),)


class ConceptRank(models.Model):
    concept_rank_key = FixedCharField(db_column='Concept_Rank_Key', primary_key=True, max_length=16)
    domain_key = models.ForeignKey('Domain', models.DO_NOTHING, db_column='Domain_Key')
    item_name = models.CharField(db_column='Item_Name', max_length=100)
    sort_order = models.IntegerField(db_column='Sort_Order', blank=True, null=True)
    abbreviation = models.CharField(db_column='Abbreviation', max_length=10)
    color_r = models.SmallIntegerField(db_column='Color_R')
    color_g = models.SmallIntegerField(db_column='Color_G')
    color_b = models.SmallIntegerField(db_column='Color_B')
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Concept_Rank'


class ConceptRelation(models.Model):
    concept_relation_key = FixedCharField(db_column='Concept_Relation_Key', primary_key=True, max_length=16)
    from_concept_key = models.ForeignKey(Concept, models.DO_NOTHING, db_column='From_Concept_Key')
    to_concept_key = models.ForeignKey(Concept, models.DO_NOTHING, db_column='To_Concept_Key')
    thesaurus_relation_type_key = models.ForeignKey('ThesaurusRelationType', models.DO_NOTHING, db_column='Thesaurus_Relation_Type_Key')
    multiplicity = models.FloatField(db_column='Multiplicity', blank=True, null=True)
    inherited = models.BooleanField(db_column='Inherited')
    comment = models.TextField(db_column='Comment', blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Concept_Relation'


class CustodianRelationship(models.Model):
    custodian_relationship_key = FixedCharField(db_column='Custodian_Relationship_Key', primary_key=True, max_length=16)
    master_table = models.CharField(db_column='Master_Table', max_length=50)
    master_field = models.CharField(db_column='Master_Field', max_length=50)
    link_field = models.CharField(db_column='Link_Field', max_length=50)
    detail_table = models.CharField(db_column='Detail_Table', max_length=50)
    detail_field = models.CharField(db_column='Detail_Field', max_length=50)
    action = models.CharField(db_column='Action', max_length=1)
    process_order = models.IntegerField(db_column='Process_Order')
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')

    class Meta:
        managed = False
        db_table = 'Custodian_Relationship'


class DamageOccurrence(models.Model):
    damage_occurrence_key = FixedCharField(db_column='DAMAGE_OCCURRENCE_KEY', primary_key=True, max_length=16)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    vague_date_start = models.IntegerField(db_column='VAGUE_DATE_START', blank=True, null=True)
    vague_date_end = models.IntegerField(db_column='VAGUE_DATE_END', blank=True, null=True)
    vague_date_type = models.CharField(db_column='VAGUE_DATE_TYPE', max_length=2)
    location_feature_key = models.ForeignKey('LocationFeature', models.DO_NOTHING, db_column='LOCATION_FEATURE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'DAMAGE_OCCURRENCE'


class DatabaseRelationship(models.Model):
    relationship_key = FixedCharField(db_column='RELATIONSHIP_KEY', primary_key=True, max_length=16)
    relationship_name = models.CharField(db_column='RELATIONSHIP_NAME', max_length=60)
    master_table = models.CharField(db_column='MASTER_TABLE', max_length=40)
    master_field = models.CharField(db_column='MASTER_FIELD', max_length=40)
    detail_table = models.CharField(db_column='DETAIL_TABLE', max_length=40)
    detail_field = models.CharField(db_column='DETAIL_FIELD', max_length=40)
    follow_up = models.BooleanField(db_column='FOLLOW_UP', blank=True, null=True)
    follow_down = models.BooleanField(db_column='FOLLOW_DOWN', blank=True, null=True)
    one_to_one = models.BooleanField(db_column='ONE_TO_ONE')
    exclude_type = models.CharField(db_column='Exclude_Type', max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'DATABASE_RELATIONSHIP'


class DeterminationType(models.Model):
    determination_type_key = FixedCharField(db_column='DETERMINATION_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=21)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    verified = models.SmallIntegerField(db_column='Verified')
    hide = models.BooleanField(db_column='Hide')

    class Meta:
        managed = False
        db_table = 'DETERMINATION_TYPE'


class DeterminerRole(models.Model):
    determiner_role_key = FixedCharField(db_column='DETERMINER_ROLE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    validation_competency = models.SmallIntegerField(db_column='VALIDATION_COMPETENCY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    hide = models.BooleanField(db_column='Hide')

    class Meta:
        managed = False
        db_table = 'DETERMINER_ROLE'


class DtdFragment(models.Model):
    addin_clsid = models.CharField(db_column='ADDIN_CLSID', primary_key=True, max_length=50)
    text = models.TextField(db_column='TEXT')

    class Meta:
        managed = False
        db_table = 'DTD_FRAGMENT'


class DatabaseRelationshipTables(models.Model):
    relationship_key = FixedCharField(db_column='Relationship_Key', primary_key=True, max_length=16)
    table_name = models.CharField(db_column='Table_Name', max_length=100)
    related_field_1 = models.CharField(db_column='Related_Field_1', max_length=100)
    related_field_2 = models.CharField(db_column='Related_Field_2', max_length=100)
    main_table = models.CharField(db_column='Main_Table', max_length=100)
    main_key_field = models.CharField(db_column='Main_Key_Field', max_length=100)
    has_system_supplied = models.BooleanField(db_column='Has_System_Supplied')

    class Meta:
        managed = False
        db_table = 'Database_Relationship_Tables'


class Domain(models.Model):
    domain_key = FixedCharField(db_column='Domain_Key', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='Item_Name', max_length=100)
    subject_area_key = models.ForeignKey('SubjectArea', models.DO_NOTHING, db_column='Subject_Area_Key')
    has_occurrences = models.BooleanField(db_column='Has_Occurrences')
    default_hierarchy_relation_type_key = models.ForeignKey('ThesaurusRelationType', models.DO_NOTHING, db_column='Default_Hierarchy_Relation_Type_Key', blank=True, null=True)
    domain_mask = models.IntegerField(db_column='Domain_Mask', blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Domain'


class DomainHyperlink(models.Model):
    domain_hyperlink_key = FixedCharField(db_column='Domain_Hyperlink_Key', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='Item_Name', max_length=100)
    image_file = models.CharField(db_column='Image_File', max_length=255, blank=True, null=True)
    url = models.CharField(db_column='URL', max_length=255)
    use_concept_key = models.BooleanField(db_column='Use_Concept_Key', blank=True, null=True)
    word_separator = models.CharField(db_column='Word_Separator', max_length=5, blank=True, null=True)
    local_domain_key = models.ForeignKey('LocalDomain', models.DO_NOTHING, db_column='Local_Domain_Key')
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=16, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Domain_Hyperlink'


class DuplicateControl(models.Model):
    taxon_occurrence_key1 = FixedCharField(db_column='Taxon_Occurrence_Key1', max_length=16)
    taxon_occurrence_key2 = FixedCharField(db_column='Taxon_Occurrence_Key2', max_length=16)
    indicator = models.IntegerField(db_column='Indicator', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Duplicate_Control'


class ExportFilter(models.Model):
    export_filter_key = FixedCharField(db_column='EXPORT_FILTER_KEY', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=40)
    include_occurrences = models.BooleanField(db_column='INCLUDE_OCCURRENCES', blank=True, null=True)
    include_locations = models.BooleanField(db_column='INCLUDE_LOCATIONS', blank=True, null=True)
    include_names = models.BooleanField(db_column='INCLUDE_NAMES', blank=True, null=True)
    sw_lat = models.FloatField(db_column='SW_LAT', blank=True, null=True)
    sw_long = models.FloatField(db_column='SW_LONG', blank=True, null=True)
    ne_lat = models.FloatField(db_column='NE_LAT', blank=True, null=True)
    ne_long = models.FloatField(db_column='NE_LONG', blank=True, null=True)
    obs_date_start = models.IntegerField(db_column='OBS_DATE_START', blank=True, null=True)
    obs_date_end = models.IntegerField(db_column='OBS_DATE_END', blank=True, null=True)
    last_export_date = models.DateTimeField(db_column='LAST_EXPORT_DATE', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'EXPORT_FILTER'


class ExportFilterSurvey(models.Model):
    export_filter_key = models.OneToOneField(ExportFilter, models.DO_NOTHING, db_column='EXPORT_FILTER_KEY', primary_key=True)
    survey_key = models.ForeignKey('Survey', models.DO_NOTHING, db_column='SURVEY_KEY')

    class Meta:
        managed = False
        db_table = 'EXPORT_FILTER_SURVEY'
        unique_together = (('export_filter_key', 'survey_key'),)


class ExportFilterTaxon(models.Model):
    export_filter_key = models.OneToOneField(ExportFilter, models.DO_NOTHING, db_column='EXPORT_FILTER_KEY', primary_key=True)
    taxon_list_item_key = models.ForeignKey('TaxonListItem', models.DO_NOTHING, db_column='TAXON_LIST_ITEM_KEY')

    class Meta:
        managed = False
        db_table = 'EXPORT_FILTER_TAXON'
        unique_together = (('export_filter_key', 'taxon_list_item_key'),)


class ExportFormatLk(models.Model):
    export_format_id = models.IntegerField(db_column='EXPORT_FORMAT_ID', primary_key=True)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=30)

    class Meta:
        managed = False
        db_table = 'EXPORT_FORMAT_LK'


class ExportFilterTag(models.Model):
    export_filter_key = models.OneToOneField(ExportFilter, models.DO_NOTHING, db_column='Export_Filter_Key', primary_key=True)
    concept_key = models.ForeignKey(Concept, models.DO_NOTHING, db_column='Concept_Key')

    class Meta:
        managed = False
        db_table = 'Export_Filter_Tag'
        unique_together = (('export_filter_key', 'concept_key'),)


class GridSquare(models.Model):
    grid_square_key = FixedCharField(db_column='GRID_SQUARE_KEY', primary_key=True, max_length=16)
    spatial_ref = models.CharField(db_column='SPATIAL_REF', max_length=20)
    location_key = models.ForeignKey('Location', models.DO_NOTHING, db_column='LOCATION_KEY', blank=True, null=True)
    spatial_ref_system = models.CharField(db_column='SPATIAL_REF_SYSTEM', max_length=4)
    spatial_ref_qualifier = models.CharField(db_column='SPATIAL_REF_QUALIFIER', max_length=20, blank=True, null=True)
    size = models.IntegerField(db_column='SIZE')
    lat = models.FloatField(db_column='LAT', blank=True, null=True)
    long = models.FloatField(db_column='LONG', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'GRID_SQUARE'


class IndexTaxonGroup(models.Model):
    taxon_list_item_key = models.OneToOneField('TaxonListItem', models.DO_NOTHING, db_column='TAXON_LIST_ITEM_KEY', primary_key=True)
    contained_list_item_key = models.ForeignKey('TaxonListItem', models.DO_NOTHING, db_column='CONTAINED_LIST_ITEM_KEY')
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    item_level = models.SmallIntegerField(db_column='ITEM_LEVEL')

    class Meta:
        managed = False
        db_table = 'INDEX_TAXON_GROUP'
        unique_together = (('taxon_list_item_key', 'contained_list_item_key'),)


class IndexTaxonName(models.Model):
    taxon_list_item_key = FixedCharField(db_column='TAXON_LIST_ITEM_KEY', max_length=16)
    taxon_list_version_key = models.ForeignKey('TaxonListVersion', models.DO_NOTHING, db_column='TAXON_LIST_VERSION_KEY')
    actual_name = models.CharField(db_column='ACTUAL_NAME', max_length=75, blank=True, null=True)
    actual_name_italic = models.BooleanField(db_column='ACTUAL_NAME_ITALIC')
    common_name = models.CharField(db_column='COMMON_NAME', max_length=75, blank=True, null=True)
    common_name_italic = models.BooleanField(db_column='COMMON_NAME_ITALIC')
    preferred_name = models.CharField(db_column='PREFERRED_NAME', max_length=75, blank=True, null=True)
    preferred_name_italic = models.BooleanField(db_column='PREFERRED_NAME_ITALIC')
    abbreviation = models.CharField(db_column='ABBREVIATION', max_length=5, blank=True, null=True)
    authority = FixedCharField(db_column='AUTHORITY', max_length=80, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA', blank=True, null=True)
    preferred_list = models.BooleanField(db_column='PREFERRED_LIST')
    allow_data_entry = models.BooleanField(db_column='Allow_Data_Entry')
    recommended_taxon_list_item_key = models.ForeignKey('TaxonListItem', models.DO_NOTHING, db_column='RECOMMENDED_TAXON_LIST_ITEM_KEY', blank=True, null=True)
    sort_order = models.CharField(db_column='SORT_ORDER', max_length=36, blank=True, null=True)
    has_children = models.BooleanField(db_column='Has_Children')
    actual_name_attribute = models.CharField(db_column='ACTUAL_NAME_ATTRIBUTE', max_length=65, blank=True, null=True)
    common_name_attribute = models.CharField(db_column='COMMON_NAME_ATTRIBUTE', max_length=65, blank=True, null=True)
    preferred_name_attribute = models.CharField(db_column='PREFERRED_NAME_ATTRIBUTE', max_length=65, blank=True, null=True)
    preferred_name_authority = FixedCharField(db_column='PREFERRED_NAME_AUTHORITY', max_length=80, blank=True, null=True)
    can_expand = models.BooleanField(db_column='CAN_EXPAND', blank=True, null=True)
    preferred_taxa = models.SmallIntegerField(db_column='PREFERRED_TAXA', blank=True, null=True)
    taxon_version_key = FixedCharField(db_column='TAXON_VERSION_KEY', max_length=16, blank=True, null=True)
    recommended_taxon_version_key = FixedCharField(db_column='RECOMMENDED_TAXON_VERSION_KEY', max_length=16, blank=True, null=True)
    output_taxon_name = models.CharField(db_column='OUTPUT_TAXON_NAME', max_length=75, blank=True, null=True)
    deprecated = models.BooleanField(db_column='DEPRECATED', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'INDEX_TAXON_NAME'


class IndexTaxonSynonym(models.Model):
    taxon_list_item_key = models.OneToOneField('TaxonListItem', models.DO_NOTHING, db_column='TAXON_LIST_ITEM_KEY', primary_key=True)
    synonym_list_item_key = models.ForeignKey('TaxonListItem', models.DO_NOTHING, db_column='SYNONYM_LIST_ITEM_KEY')

    class Meta:
        managed = False
        db_table = 'INDEX_TAXON_SYNONYM'
        unique_together = (('taxon_list_item_key', 'synonym_list_item_key'),)


class Individual(models.Model):
    name_key = models.OneToOneField('Name', models.DO_NOTHING, db_column='NAME_KEY', primary_key=True)
    title = models.CharField(db_column='TITLE', max_length=4, blank=True, null=True)
    forename = models.CharField(db_column='FORENAME', max_length=30, blank=True, null=True)
    initials = FixedCharField(db_column='INITIALS', max_length=8, blank=True, null=True)
    honorifics = models.CharField(db_column='HONORIFICS', max_length=20, blank=True, null=True)
    surname = models.CharField(db_column='SURNAME', max_length=30)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    born_vague_date_start = models.IntegerField(db_column='BORN_VAGUE_DATE_START', blank=True, null=True)
    born_vague_date_end = models.IntegerField(db_column='BORN_VAGUE_DATE_END', blank=True, null=True)
    born_vague_date_type = models.CharField(db_column='BORN_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    died_vague_date_start = models.IntegerField(db_column='DIED_VAGUE_DATE_START', blank=True, null=True)
    died_vague_date_end = models.IntegerField(db_column='DIED_VAGUE_DATE_END', blank=True, null=True)
    died_vague_date_type = models.CharField(db_column='DIED_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    person_floreat = models.CharField(db_column='PERSON_FLOREAT', max_length=12, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    organisation_department_key = models.ForeignKey('OrganisationDepartment', models.DO_NOTHING, db_column='ORGANISATION_DEPARTMENT_KEY', blank=True, null=True)
    active_vague_date_start = models.IntegerField(db_column='ACTIVE_VAGUE_DATE_START', blank=True, null=True)
    active_vague_date_end = models.IntegerField(db_column='ACTIVE_VAGUE_DATE_END', blank=True, null=True)
    active_vague_date_type = models.CharField(db_column='ACTIVE_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'INDIVIDUAL'


class IwColumnType(models.Model):
    iw_column_type_key = FixedCharField(db_column='IW_Column_Type_Key', primary_key=True, max_length=16)
    class_name = models.CharField(db_column='Class_Name', max_length=50)
    item_name = models.CharField(db_column='Item_Name', max_length=30)
    required = models.BooleanField(db_column='Required')
    commonly_used = models.BooleanField(db_column='Commonly_Used')
    sequence = models.SmallIntegerField(db_column='Sequence', blank=True, null=True)
    field_type = models.CharField(db_column='Field_Type', max_length=20, blank=True, null=True)
    parser_class_name = models.CharField(db_column='Parser_Class_Name', max_length=50, blank=True, null=True)
    maximum_length = models.IntegerField(db_column='Maximum_Length', blank=True, null=True)
    term_list_table = models.CharField(db_column='Term_List_Table', max_length=50, blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = FixedCharField(db_column='Entry_Date', max_length=16)
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = FixedCharField(db_column='Changed_Date', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'IW_Column_Type'


class IwColumnTypeMatchRule(models.Model):
    iw_column_type_key = models.OneToOneField(IwColumnType, models.DO_NOTHING, db_column='IW_Column_Type_Key', primary_key=True)
    iw_match_rule_key = models.ForeignKey('IwMatchRule', models.DO_NOTHING, db_column='IW_Match_Rule_Key')
    field_index = models.IntegerField(db_column='Field_Index')
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = FixedCharField(db_column='Entry_Date', max_length=16)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'IW_Column_Type_Match_Rule'
        unique_together = (('iw_column_type_key', 'iw_match_rule_key'),)


class IwColumnTypePattern(models.Model):
    iw_column_type_key = models.OneToOneField(IwColumnType, models.DO_NOTHING, db_column='IW_Column_Type_Key', primary_key=True)
    pattern = models.CharField(db_column='Pattern', max_length=20)
    exclude_match = models.BooleanField(db_column='Exclude_Match')
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = FixedCharField(db_column='Entry_Date', max_length=16)
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = FixedCharField(db_column='Changed_Date', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'IW_Column_Type_Pattern'
        unique_together = (('iw_column_type_key', 'pattern'),)


class IwColumnTypeRelationship(models.Model):
    iw_column_type_key = models.OneToOneField(IwColumnType, models.DO_NOTHING, db_column='IW_Column_Type_Key', primary_key=True)
    related_iw_column_type_key = models.ForeignKey(IwColumnType, models.DO_NOTHING, db_column='Related_IW_Column_Type_Key')
    relationship_type = models.SmallIntegerField(db_column='Relationship_Type')
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = FixedCharField(db_column='Entry_Date', max_length=16)
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = FixedCharField(db_column='Changed_Date', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'IW_Column_Type_Relationship'
        unique_together = (('iw_column_type_key', 'related_iw_column_type_key'),)


class IwMatchRule(models.Model):
    iw_match_rule_key = FixedCharField(db_column='IW_Match_Rule_Key', primary_key=True, max_length=16)
    sequence = models.IntegerField(db_column='Sequence', blank=True, null=True)
    item_name = models.CharField(db_column='Item_Name', max_length=50)
    control_type = models.SmallIntegerField(db_column='Control_Type')
    imported_data_insert_sql = models.TextField(db_column='Imported_Data_Insert_SQL', blank=True, null=True)
    remembered_matches_procedure = models.CharField(db_column='Remembered_Matches_Procedure', max_length=50, blank=True, null=True)
    match_procedure = models.CharField(db_column='Match_Procedure', max_length=50, blank=True, null=True)
    record_matches_procedure = models.CharField(db_column='Record_Matches_Procedure', max_length=50, blank=True, null=True)
    new_entry_procedure = models.CharField(db_column='New_Entry_Procedure', max_length=50, blank=True, null=True)
    requires_checklist = models.BooleanField(db_column='Requires_Checklist')
    set_match_procedure = models.CharField(db_column='Set_Match_Procedure', max_length=50, blank=True, null=True)
    table_create_sql = models.TextField(db_column='Table_Create_SQL')
    key_to_caption_procedure = models.CharField(db_column='Key_To_Caption_Procedure', max_length=50, blank=True, null=True)
    search_type = models.IntegerField(db_column='Search_Type', blank=True, null=True)
    checklists_select_procedure = models.CharField(db_column='Checklists_Select_Procedure', max_length=50, blank=True, null=True)
    termlist_select_procedure = models.CharField(db_column='Termlist_Select_Procedure', max_length=50, blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data', blank=True, null=True)
    exclude_unmatched_procedure = models.CharField(db_column='Exclude_Unmatched_Procedure', max_length=50, blank=True, null=True)
    update_notes_procedure = models.CharField(db_column='Update_Notes_Procedure', max_length=50, blank=True, null=True)
    display_notes_procedure = models.CharField(db_column='Display_Notes_Procedure', max_length=50, blank=True, null=True)
    detailed_notes_procedure = models.CharField(db_column='Detailed_Notes_Procedure', max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'IW_Match_Rule'


class IwMatchedAbundanceQualifiers(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Abundance_Qualifiers'


class IwMatchedAssociatedSpecies(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)
    match_checklist_key = FixedCharField(db_column='Match_Checklist_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Associated_Species'


class IwMatchedAssociationTypes(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Association_Types'


class IwMatchedBiotopes(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)
    match_classification_key = FixedCharField(db_column='Match_Classification_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Biotopes'


class IwMatchedDeterminationTypes(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Determination_Types'


class IwMatchedDeterminerRoles(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Determiner_Roles'


class IwMatchedLocations(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Locations'


class IwMatchedNames(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Names'


class IwMatchedRecordTypes(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Record_Types'


class IwMatchedReferences(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=500)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_References'


class IwMatchedSampleTypes(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Sample_Types'


class IwMatchedSpecies(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)
    match_checklist_key = FixedCharField(db_column='Match_Checklist_Key', max_length=16, blank=True, null=True)
    temp_user_id = FixedCharField(db_column='Temp_User_ID', max_length=16, blank=True, null=True)
    iw_matched_species_id = models.AutoField(db_column='IW_Matched_Species_Id', primary_key=True)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Species'


class IwMatchedSpecimenTypes(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Specimen_Types'


class IwMatchedSubstrates(models.Model):
    matched_value = models.CharField(db_column='Matched_Value', max_length=100)
    matched_key = FixedCharField(db_column='Matched_Key', max_length=16)

    class Meta:
        managed = False
        db_table = 'IW_Matched_Substrates'


class IwOutputField(models.Model):
    iw_output_field_key = FixedCharField(db_column='IW_Output_Field_Key', primary_key=True, max_length=16)
    name = models.CharField(db_column='Name', max_length=30)
    data_type = models.CharField(db_column='Data_Type', max_length=20)
    iw_column_type_key = models.ForeignKey(IwColumnType, models.DO_NOTHING, db_column='IW_Column_Type_Key', blank=True, null=True)
    source_field_name = models.CharField(db_column='Source_Field_Name', max_length=30, blank=True, null=True)
    generating_class_name = models.CharField(db_column='Generating_Class_Name', max_length=50, blank=True, null=True)
    generator_field_index = models.IntegerField(db_column='Generator_Field_Index', blank=True, null=True)
    literal_value = models.CharField(db_column='Literal_Value', max_length=20, blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'IW_Output_Field'


class IwPostProcessingProcedure(models.Model):
    iw_post_processing_procedure_key = FixedCharField(db_column='IW_Post_Processing_Procedure_Key', primary_key=True, max_length=16)
    sequence = models.IntegerField(db_column='Sequence')
    required_table_name = models.CharField(db_column='Required_Table_Name', max_length=30, blank=True, null=True)
    procedure_name = models.CharField(db_column='Procedure_Name', max_length=50)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'IW_Post_Processing_Procedure'


class IwTableRule(models.Model):
    iw_table_rule_key = models.OneToOneField('self', models.DO_NOTHING, db_column='IW_Table_Rule_Key', primary_key=True)
    sequence = models.SmallIntegerField(db_column='Sequence')
    table_name = models.CharField(db_column='Table_Name', max_length=30)
    filter_expression = models.TextField(db_column='Filter_Expression', blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16, blank=True, null=True)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'IW_Table_Rule'


class IwTableRuleOutputField(models.Model):
    iw_table_rule_key = models.OneToOneField(IwTableRule, models.DO_NOTHING, db_column='IW_Table_Rule_Key', primary_key=True)
    iw_output_field_key = models.ForeignKey(IwOutputField, models.DO_NOTHING, db_column='IW_Output_Field_Key')
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'IW_Table_Rule_Output_Field'
        unique_together = (('iw_table_rule_key', 'iw_output_field_key'),)


class IwTableRuleRelatedField(models.Model):
    iw_table_rule_key = models.OneToOneField(IwTableRule, models.DO_NOTHING, db_column='IW_Table_Rule_Key', primary_key=True)
    iw_column_type_key = models.ForeignKey(IwColumnType, models.DO_NOTHING, db_column='IW_Column_Type_Key')
    relationship = models.SmallIntegerField(db_column='Relationship')
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'IW_Table_Rule_Related_Field'
        unique_together = (('iw_table_rule_key', 'iw_column_type_key', 'relationship'),)


class IwTableRuleRelatedTable(models.Model):
    iw_table_rule_key = FixedCharField(db_column='IW_Table_Rule_Key', primary_key=True, max_length=16)
    table_name = models.CharField(db_column='Table_Name', max_length=30)
    relationship = models.SmallIntegerField(db_column='Relationship')
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'IW_Table_Rule_Related_Table'
        unique_together = (('iw_table_rule_key', 'table_name'),)


class IndexTaxonDesignation(models.Model):
    taxon_list_item_key = models.OneToOneField('TaxonListItem', models.DO_NOTHING, db_column='Taxon_List_Item_Key', primary_key=True)
    taxon_designation_type_key = models.ForeignKey('TaxonDesignationType', models.DO_NOTHING, db_column='Taxon_Designation_Type_Key')

    class Meta:
        managed = False
        db_table = 'Index_Taxon_Designation'
        unique_together = (('taxon_list_item_key', 'taxon_designation_type_key'),)


class IndexTaxonHierarchy(models.Model):
    recommended_taxon_version_key = FixedCharField(db_column='Recommended_Taxon_Version_Key', max_length=16)
    hierarchy_taxon_version_key = FixedCharField(db_column='Hierarchy_Taxon_Version_Key', max_length=16)
    hierarchy_type = models.CharField(db_column='Hierarchy_Type', max_length=1)

    class Meta:
        managed = False
        db_table = 'Index_Taxon_Hierarchy'


class IndexVirtualLists(models.Model):
    taxon_list_key = FixedCharField(db_column='Taxon_List_key', primary_key=True, max_length=16)
    group_name = models.CharField(db_column='Group_Name', max_length=100, blank=True, null=True)
    start_lineage = models.CharField(db_column='Start_Lineage', max_length=40, blank=True, null=True)
    start_sort_code = models.IntegerField(db_column='Start_Sort_Code', blank=True, null=True)
    end_sort_code = models.IntegerField(db_column='End_Sort_Code', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Index_Virtual_Lists'


class Journal(models.Model):
    journal_key = FixedCharField(db_column='JOURNAL_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=50, blank=True, null=True)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'JOURNAL'


class LandParcel(models.Model):
    land_parcel_key = FixedCharField(db_column='LAND_PARCEL_KEY', primary_key=True, max_length=16)
    location_key = models.ForeignKey('Location', models.DO_NOTHING, db_column='LOCATION_KEY')
    land_parcel_number = models.CharField(db_column='LAND_PARCEL_NUMBER', max_length=20)
    land_parcel_map_sheet = models.CharField(db_column='LAND_PARCEL_MAP_SHEET', max_length=30)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LAND_PARCEL'


class LastKey(models.Model):
    table_name = models.CharField(db_column='TABLE_NAME', primary_key=True, max_length=30)
    last_key_text = FixedCharField(db_column='LAST_KEY_TEXT', max_length=8)

    class Meta:
        managed = False
        db_table = 'LAST_KEY'


class Licence(models.Model):
    licence_key = FixedCharField(db_column='LICENCE_KEY', primary_key=True, max_length=16)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=10)
    description = models.TextField(db_column='DESCRIPTION')
    url_readable = models.CharField(db_column='URL_READABLE', max_length=255, blank=True, null=True)
    url_legal = models.CharField(db_column='URL_LEGAL', max_length=255, blank=True, null=True)
    version = models.CharField(db_column='VERSION', max_length=10, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LICENCE'


class Location(models.Model):
    location_key = FixedCharField(db_column='LOCATION_KEY', primary_key=True, max_length=16)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    parent_key = models.ForeignKey('self', models.DO_NOTHING, db_column='PARENT_KEY', blank=True, null=True)
    spatial_ref = models.CharField(db_column='SPATIAL_REF', max_length=40, blank=True, null=True)
    spatial_ref_system = models.CharField(db_column='SPATIAL_REF_SYSTEM', max_length=4)
    lat = models.FloatField(db_column='LAT')
    long = models.FloatField(db_column='LONG')
    location_type_key = models.ForeignKey('LocationType', models.DO_NOTHING, db_column='LOCATION_TYPE_KEY')
    file_code = models.CharField(db_column='FILE_CODE', max_length=20, blank=True, null=True)
    spatial_ref_qualifier = models.CharField(db_column='SPATIAL_REF_QUALIFIER', max_length=20)
    approach = models.TextField(db_column='APPROACH', blank=True, null=True)
    restriction = models.TextField(db_column='RESTRICTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION'


class LocationAdminAreas(models.Model):
    location_admin_areas_key = FixedCharField(db_column='LOCATION_ADMIN_AREAS_KEY', primary_key=True, max_length=16)
    admin_area_key = models.ForeignKey(AdminArea, models.DO_NOTHING, db_column='ADMIN_AREA_KEY')
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_ADMIN_AREAS'


class LocationBoundary(models.Model):
    location_boundary_key = FixedCharField(db_column='LOCATION_BOUNDARY_KEY', primary_key=True, max_length=16)
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY')
    from_vague_date_start = models.IntegerField(db_column='FROM_VAGUE_DATE_START', blank=True, null=True)
    from_vague_date_end = models.IntegerField(db_column='FROM_VAGUE_DATE_END', blank=True, null=True)
    from_vague_date_type = models.CharField(db_column='FROM_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    to_vague_date_start = models.IntegerField(db_column='TO_VAGUE_DATE_START', blank=True, null=True)
    to_vague_date_end = models.IntegerField(db_column='TO_VAGUE_DATE_END', blank=True, null=True)
    to_vague_date_type = models.CharField(db_column='TO_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    version = models.SmallIntegerField(db_column='VERSION')
    map_sheet_key = FixedCharField(db_column='MAP_SHEET_KEY', max_length=16, blank=True, null=True)
    object_id = models.CharField(db_column='OBJECT_ID', max_length=30, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    external_filename = models.CharField(db_column='External_Filename', max_length=255, blank=True, null=True)
    external_filename_keyfield = models.CharField(db_column='External_Filename_KeyField', max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_BOUNDARY'


class LocationData(models.Model):
    location_data_key = FixedCharField(db_column='LOCATION_DATA_KEY', primary_key=True, max_length=16)
    data = models.CharField(db_column='DATA', max_length=12)
    accuracy = models.CharField(db_column='ACCURACY', max_length=20, blank=True, null=True)
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY')
    measurement_qualifier_key = models.ForeignKey('MeasurementQualifier', models.DO_NOTHING, db_column='MEASUREMENT_QUALIFIER_KEY')
    measurement_unit_key = models.ForeignKey('MeasurementUnit', models.DO_NOTHING, db_column='MEASUREMENT_UNIT_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_DATA'


class LocationDesignation(models.Model):
    designation_key = FixedCharField(db_column='DESIGNATION_KEY', primary_key=True, max_length=16)
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY')
    site_status_key = models.ForeignKey('SiteStatus', models.DO_NOTHING, db_column='SITE_STATUS_KEY')
    ref_code = models.CharField(db_column='REF_CODE', max_length=20, blank=True, null=True)
    authority = models.ForeignKey('Name', models.DO_NOTHING, db_column='AUTHORITY')
    date_from = models.DateTimeField(db_column='DATE_FROM', blank=True, null=True)
    date_to = models.DateTimeField(db_column='DATE_TO', blank=True, null=True)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_DESIGNATION'


class LocationFeature(models.Model):
    location_feature_key = FixedCharField(db_column='LOCATION_FEATURE_KEY', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=60)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY')
    feature_grading_key = models.ForeignKey('LocationFeatureGrading', models.DO_NOTHING, db_column='FEATURE_GRADING_KEY', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    date_from = models.DateTimeField(db_column='DATE_FROM', blank=True, null=True)
    date_to = models.DateTimeField(db_column='DATE_TO', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_FEATURE'


class LocationFeatureGrading(models.Model):
    feature_grading_key = FixedCharField(db_column='FEATURE_GRADING_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    location_feature_type_key = models.ForeignKey('LocationFeatureType', models.DO_NOTHING, db_column='LOCATION_FEATURE_TYPE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_FEATURE_GRADING'


class LocationFeatureSources(models.Model):
    source_link_key = FixedCharField(db_column='SOURCE_LINK_KEY', primary_key=True, max_length=16)
    location_feature_key = models.ForeignKey(LocationFeature, models.DO_NOTHING, db_column='LOCATION_FEATURE_KEY')
    source_key = models.ForeignKey('Source', models.DO_NOTHING, db_column='SOURCE_KEY')
    original = models.BooleanField(db_column='ORIGINAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_FEATURE_SOURCES'


class LocationFeatureType(models.Model):
    location_feature_type_key = FixedCharField(db_column='LOCATION_FEATURE_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_FEATURE_TYPE'


class LocationName(models.Model):
    location_name_key = FixedCharField(db_column='LOCATION_NAME_KEY', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=100)
    preferred = models.BooleanField(db_column='PREFERRED')
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_NAME'


class LocationRelation(models.Model):
    location_relation_key = FixedCharField(db_column='LOCATION_RELATION_KEY', primary_key=True, max_length=16)
    location_key_1 = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY_1')
    location_key_2 = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY_2')
    relationship = models.CharField(db_column='RELATIONSHIP', max_length=50)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_RELATION'


class LocationSources(models.Model):
    source_link_key = FixedCharField(db_column='SOURCE_LINK_KEY', primary_key=True, max_length=16)
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY')
    source_key = models.ForeignKey('Source', models.DO_NOTHING, db_column='SOURCE_KEY')
    original = models.BooleanField(db_column='ORIGINAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_SOURCES'


class LocationType(models.Model):
    location_type_key = FixedCharField(db_column='LOCATION_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.CharField(db_column='DESCRIPTION', max_length=200, blank=True, null=True)
    authority = models.CharField(db_column='AUTHORITY', max_length=100, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_TYPE'


class LocationUse(models.Model):
    location_use_key = FixedCharField(db_column='LOCATION_USE_KEY', primary_key=True, max_length=16)
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY')
    location_use = models.CharField(db_column='LOCATION_USE', max_length=30)
    potential = models.TextField(db_column='POTENTIAL', blank=True, null=True)
    from_vague_date_start = models.IntegerField(db_column='FROM_VAGUE_DATE_START', blank=True, null=True)
    from_vague_date_end = models.IntegerField(db_column='FROM_VAGUE_DATE_END', blank=True, null=True)
    from_vague_date_type = models.CharField(db_column='FROM_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    to_vague_date_start = models.IntegerField(db_column='TO_VAGUE_DATE_START', blank=True, null=True)
    to_vague_date_end = models.IntegerField(db_column='TO_VAGUE_DATE_END', blank=True, null=True)
    to_vague_date_type = models.CharField(db_column='TO_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'LOCATION_USE'


class Language(models.Model):
    language_key = models.CharField(db_column='Language_Key', primary_key=True, max_length=4)
    item_name = models.CharField(db_column='Item_Name', max_length=50)
    priority = models.SmallIntegerField(db_column='Priority', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Language'


class LocalDomain(models.Model):
    local_domain_key = FixedCharField(db_column='Local_Domain_Key', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='Item_Name', max_length=100)
    domain_key = models.ForeignKey(Domain, models.DO_NOTHING, db_column='Domain_Key')
    language_key = models.ForeignKey(Language, models.DO_NOTHING, db_column='Language_Key')
    concept_group_label = models.CharField(db_column='Concept_Group_Label', max_length=50)
    entered_session_id = FixedCharField(db_column='Entered_Session_Id', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_Id', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Local_Domain'


class ManagementAim(models.Model):
    management_aim_key = FixedCharField(db_column='MANAGEMENT_AIM_KEY', primary_key=True, max_length=16)
    location_feature_key = models.ForeignKey(LocationFeature, models.DO_NOTHING, db_column='LOCATION_FEATURE_KEY')
    item_name = models.CharField(db_column='ITEM_NAME', max_length=50)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    authority = models.ForeignKey('Name', models.DO_NOTHING, db_column='AUTHORITY')
    next_appraisal_date = models.CharField(db_column='NEXT_APPRAISAL_DATE', max_length=50, blank=True, null=True)
    agreement_date = models.DateTimeField(db_column='AGREEMENT_DATE')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'MANAGEMENT_AIM'


class MapSheet(models.Model):
    map_sheet_key = FixedCharField(db_column='MAP_SHEET_KEY', primary_key=True, max_length=16)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='USER_ID', blank=True, null=True)
    sheet_name = models.CharField(db_column='SHEET_NAME', max_length=20, blank=True, null=True)
    file_name = models.CharField(db_column='FILE_NAME', max_length=255, blank=True, null=True)
    sheet_type = models.SmallIntegerField(db_column='SHEET_TYPE')
    sw_spatial_ref = models.CharField(db_column='SW_SPATIAL_REF', max_length=20, blank=True, null=True)
    ne_spatial_ref = models.CharField(db_column='NE_SPATIAL_REF', max_length=20, blank=True, null=True)
    spatial_ref_system = models.CharField(db_column='SPATIAL_REF_SYSTEM', max_length=4, blank=True, null=True)
    sw_lat = models.FloatField(db_column='SW_LAT', blank=True, null=True)
    sw_long = models.FloatField(db_column='SW_LONG', blank=True, null=True)
    ne_lat = models.FloatField(db_column='NE_LAT', blank=True, null=True)
    ne_long = models.FloatField(db_column='NE_LONG', blank=True, null=True)
    ne_spatial_ref_qualifier = models.CharField(db_column='NE_SPATIAL_REF_QUALIFIER', max_length=20, blank=True, null=True)
    sw_spatial_ref_qualifier = models.CharField(db_column='SW_SPATIAL_REF_QUALIFIER', max_length=20, blank=True, null=True)
    cut_in_scale = models.CharField(db_column='CUT_IN_SCALE', max_length=15, blank=True, null=True)
    cut_out_scale = models.CharField(db_column='CUT_OUT_SCALE', max_length=15, blank=True, null=True)
    sheet_displayed = models.BooleanField(db_column='SHEET_DISPLAYED', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    new_data = models.BooleanField(db_column='NEW_DATA', blank=True, null=True)
    modified_data = models.BooleanField(db_column='MODIFIED_DATA', blank=True, null=True)
    dataset_sheet_name = models.CharField(db_column='DATASET_SHEET_NAME', max_length=50, blank=True, null=True)
    remove_sheet = models.BooleanField(db_column='REMOVE_SHEET', blank=True, null=True)
    dataset_sheet_filename = models.CharField(db_column='DATASET_SHEET_FILENAME', max_length=255, blank=True, null=True)
    dataset_sheet_order = models.IntegerField(db_column='DATASET_SHEET_ORDER', blank=True, null=True)
    selected_colour = models.IntegerField(db_column='SELECTED_COLOUR', blank=True, null=True)
    unselected_colour = models.IntegerField(db_column='UNSELECTED_COLOUR', blank=True, null=True)
    pattern_index = models.IntegerField(db_column='PATTERN_INDEX', blank=True, null=True)
    computer_id = FixedCharField(db_column='COMPUTER_ID', max_length=16, blank=True, null=True)
    base_map_key = models.ForeignKey(BaseMap, models.DO_NOTHING, db_column='Base_Map_Key', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'MAP_SHEET'


class MeasurementContext(models.Model):
    measurement_context_key = FixedCharField(db_column='MEASUREMENT_CONTEXT_KEY', primary_key=True, max_length=16)
    context_name = models.CharField(db_column='CONTEXT_NAME', max_length=20)
    data_table = models.CharField(db_column='DATA_TABLE', max_length=30)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'MEASUREMENT_CONTEXT'


class MeasurementQualifier(models.Model):
    measurement_qualifier_key = FixedCharField(db_column='MEASUREMENT_QUALIFIER_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=40)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    measurement_type_key = models.ForeignKey('MeasurementType', models.DO_NOTHING, db_column='MEASUREMENT_TYPE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'MEASUREMENT_QUALIFIER'


class MeasurementType(models.Model):
    measurement_type_key = FixedCharField(db_column='MEASUREMENT_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.CharField(db_column='DESCRIPTION', max_length=50, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'MEASUREMENT_TYPE'


class MeasurementTypeContext(models.Model):
    measurement_type_key = models.OneToOneField(MeasurementType, models.DO_NOTHING, db_column='MEASUREMENT_TYPE_KEY', primary_key=True)
    measurement_context_key = models.ForeignKey(MeasurementContext, models.DO_NOTHING, db_column='MEASUREMENT_CONTEXT_KEY')
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')

    class Meta:
        managed = False
        db_table = 'MEASUREMENT_TYPE_CONTEXT'
        unique_together = (('measurement_type_key', 'measurement_context_key'),)


class MeasurementUnit(models.Model):
    measurement_unit_key = FixedCharField(db_column='MEASUREMENT_UNIT_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=40)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    data_type = models.CharField(db_column='DATA_TYPE', max_length=1)
    measurement_type_key = models.ForeignKey(MeasurementType, models.DO_NOTHING, db_column='MEASUREMENT_TYPE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'MEASUREMENT_UNIT'


class Meaning(models.Model):
    meaning_key = FixedCharField(db_column='Meaning_Key', primary_key=True, max_length=16)

    class Meta:
        managed = False
        db_table = 'Meaning'


class MeaningRelation(models.Model):
    meaning_relation_key = FixedCharField(db_column='Meaning_Relation_Key', primary_key=True, max_length=16)
    from_meaning_key = models.ForeignKey(Meaning, models.DO_NOTHING, db_column='From_Meaning_Key')
    to_meaning_key = models.ForeignKey(Meaning, models.DO_NOTHING, db_column='To_Meaning_Key')
    from_concept_key = FixedCharField(db_column='From_Concept_Key', max_length=16, blank=True, null=True)
    to_concept_key = FixedCharField(db_column='To_Concept_Key', max_length=16, blank=True, null=True)
    thesaurus_relation_type_key = FixedCharField(db_column='Thesaurus_Relation_Type_Key', max_length=16)
    multiplicity = models.FloatField(db_column='Multiplicity', blank=True, null=True)
    comment = models.TextField(db_column='Comment', blank=True, null=True)
    inherited = models.BooleanField(db_column='Inherited')
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Meaning_Relation'


class MeasurementUnitValue(models.Model):
    measurement_unit_key = models.OneToOneField(MeasurementUnit, models.DO_NOTHING, db_column='Measurement_Unit_Key', primary_key=True)
    data = models.CharField(db_column='Data', max_length=20)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')

    class Meta:
        managed = False
        db_table = 'Measurement_Unit_Value'
        unique_together = (('measurement_unit_key', 'data'),)


class Name(models.Model):
    name_key = FixedCharField(db_column='NAME_KEY', primary_key=True, max_length=16)
    organisation = models.BooleanField(db_column='ORGANISATION')
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'NAME'


class Nameserver(models.Model):
    input_taxon_version_key = models.OneToOneField('TaxonVersion', models.DO_NOTHING, db_column='INPUT_TAXON_VERSION_KEY', primary_key=True)
    taxon_version_form = models.CharField(db_column='TAXON_VERSION_FORM', max_length=1)
    taxon_version_status = models.CharField(db_column='TAXON_VERSION_STATUS', max_length=1)
    taxon_type = models.CharField(db_column='TAXON_TYPE', max_length=1, blank=True, null=True)
    recommended_taxon_version_key = models.ForeignKey('TaxonVersion', models.DO_NOTHING, db_column='RECOMMENDED_TAXON_VERSION_KEY', blank=True, null=True)
    recommended_taxon_list_item_key = models.ForeignKey('TaxonListItem', models.DO_NOTHING, db_column='RECOMMENDED_TAXON_LIST_ITEM_KEY', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'NAMESERVER'


class NameRelation(models.Model):
    name_relation_key = FixedCharField(db_column='NAME_RELATION_KEY', primary_key=True, max_length=16)
    name_key_1 = models.ForeignKey(Name, models.DO_NOTHING, db_column='NAME_KEY_1')
    name_key_2 = models.ForeignKey(Name, models.DO_NOTHING, db_column='NAME_KEY_2')
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    from_vague_date_start = models.IntegerField(db_column='FROM_VAGUE_DATE_START', blank=True, null=True)
    from_vague_date_end = models.IntegerField(db_column='FROM_VAGUE_DATE_END', blank=True, null=True)
    from_vague_date_type = models.CharField(db_column='FROM_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    to_vague_date_start = models.IntegerField(db_column='TO_VAGUE_DATE_START', blank=True, null=True)
    to_vague_date_end = models.IntegerField(db_column='TO_VAGUE_DATE_END', blank=True, null=True)
    to_vague_date_type = models.CharField(db_column='TO_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    role = models.CharField(db_column='ROLE', max_length=30)
    name_code = models.CharField(db_column='NAME_CODE', max_length=15, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'NAME_RELATION'


class NameSources(models.Model):
    source_link_key = FixedCharField(db_column='SOURCE_LINK_KEY', primary_key=True, max_length=16)
    name_key = models.ForeignKey(Name, models.DO_NOTHING, db_column='NAME_KEY')
    source_key = models.ForeignKey('Source', models.DO_NOTHING, db_column='SOURCE_KEY')
    original = models.BooleanField(db_column='ORIGINAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'NAME_SOURCES'


class Organisation(models.Model):
    name_key = models.OneToOneField(Name, models.DO_NOTHING, db_column='NAME_KEY', primary_key=True)
    full_name = models.CharField(db_column='FULL_NAME', max_length=60)
    acronym = models.CharField(db_column='ACRONYM', max_length=10, blank=True, null=True)
    founded_vague_date_start = models.IntegerField(db_column='FOUNDED_VAGUE_DATE_START', blank=True, null=True)
    founded_vague_date_end = models.IntegerField(db_column='FOUNDED_VAGUE_DATE_END', blank=True, null=True)
    founded_vague_date_type = models.CharField(db_column='FOUNDED_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    ended_vague_date_start = models.IntegerField(db_column='ENDED_VAGUE_DATE_START', blank=True, null=True)
    ended_vague_date_end = models.IntegerField(db_column='ENDED_VAGUE_DATE_END', blank=True, null=True)
    ended_vague_date_type = models.CharField(db_column='ENDED_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    organisation_type_key = models.ForeignKey('OrganisationType', models.DO_NOTHING, db_column='ORGANISATION_TYPE_KEY', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')

    class Meta:
        managed = False
        db_table = 'ORGANISATION'


class OrganisationType(models.Model):
    organisation_type_key = FixedCharField(db_column='ORGANISATION_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ORGANISATION_TYPE'


class Organism(models.Model):
    organism_key = FixedCharField(db_column='ORGANISM_KEY', primary_key=True, max_length=16)
    parent_key = models.ForeignKey('self', models.DO_NOTHING, db_column='PARENT_KEY', blank=True, null=True)
    taxon_version_key = models.ForeignKey('TaxonVersion', models.DO_NOTHING, db_column='TAXON_VERSION_KEY')
    uk_status_key = FixedCharField(db_column='UK_STATUS_KEY', max_length=16, blank=True, null=True)
    marine_flag = models.CharField(db_column='MARINE_FLAG', max_length=1, blank=True, null=True)
    terrestrial_freshwater_flag = models.CharField(db_column='TERRESTRIAL_FRESHWATER_FLAG', max_length=1, blank=True, null=True)
    redundant_flag = models.CharField(db_column='REDUNDANT_FLAG', max_length=1, blank=True, null=True)
    non_native_flag = models.CharField(db_column='NON_NATIVE_FLAG', max_length=1, blank=True, null=True)
    only_in_not_fit_for_web = models.CharField(db_column='ONLY_IN_NOT_FIT_FOR_WEB', max_length=1, blank=True, null=True)
    orphan = models.CharField(db_column='ORPHAN', max_length=1, blank=True, null=True)
    vernacular = models.CharField(db_column='VERNACULAR', max_length=1, blank=True, null=True)
    weight = models.IntegerField(db_column='WEIGHT', blank=True, null=True)
    lineage = models.CharField(db_column='LINEAGE', max_length=40, blank=True, null=True)
    sort_level = models.IntegerField(db_column='SORT_LEVEL', blank=True, null=True)
    sort_order = models.CharField(db_column='SORT_ORDER', max_length=36, blank=True, null=True)
    organism_rank_key = models.ForeignKey('TaxonRank', models.DO_NOTHING, db_column='ORGANISM_RANK_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    deleted_date = models.DateTimeField(db_column='DELETED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    sort_code = models.IntegerField(db_column='Sort_Code', blank=True, null=True)
    has_children = models.BooleanField(db_column='Has_Children', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ORGANISM'


class OrganisationDepartment(models.Model):
    organisation_department_key = FixedCharField(db_column='Organisation_Department_Key', primary_key=True, max_length=16)
    name_key = models.ForeignKey(Organisation, models.DO_NOTHING, db_column='Name_Key')
    acronym = models.CharField(db_column='Acronym', max_length=20, blank=True, null=True)
    item_name = models.CharField(db_column='Item_Name', max_length=100)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Organisation_Department'


class PotentialThreat(models.Model):
    potential_threat_key = FixedCharField(db_column='POTENTIAL_THREAT_KEY', primary_key=True, max_length=16)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    threat = models.CharField(db_column='THREAT', max_length=60)
    threat_type_key = models.ForeignKey('ThreatType', models.DO_NOTHING, db_column='THREAT_TYPE_KEY')
    location_feature_key = models.ForeignKey(LocationFeature, models.DO_NOTHING, db_column='LOCATION_FEATURE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'POTENTIAL_THREAT'


class PreferredLinks(models.Model):
    table_name = models.CharField(db_column='TABLE_NAME', primary_key=True, max_length=50)
    preferred_field = models.CharField(db_column='PREFERRED_FIELD', max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'PREFERRED_LINKS'


class RecorderRole(models.Model):
    recorder_role_key = FixedCharField(db_column='RECORDER_ROLE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'RECORDER_ROLE'


class RecordingScheme(models.Model):
    recording_scheme_key = FixedCharField(db_column='RECORDING_SCHEME_KEY', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=30)
    email = models.CharField(db_column='EMAIL', max_length=40, blank=True, null=True)
    export_filter_key = FixedCharField(db_column='EXPORT_FILTER_KEY', max_length=16, blank=True, null=True)
    export_format = models.ForeignKey(ExportFormatLk, models.DO_NOTHING, db_column='EXPORT_FORMAT_ID')
    last_contribution_date = models.DateTimeField(db_column='LAST_CONTRIBUTION_DATE', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'RECORDING_SCHEME'


class RecordType(models.Model):
    record_type_key = FixedCharField(db_column='RECORD_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=40)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'RECORD_TYPE'


class Reference(models.Model):
    source_key = models.OneToOneField('Source', models.DO_NOTHING, db_column='SOURCE_KEY', primary_key=True)
    year_vague_date_start = models.IntegerField(db_column='YEAR_VAGUE_DATE_START', blank=True, null=True)
    year_vague_date_end = models.IntegerField(db_column='YEAR_VAGUE_DATE_END', blank=True, null=True)
    year_vague_date_type = models.CharField(db_column='YEAR_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    full_reference = models.TextField(db_column='FULL_REFERENCE', blank=True, null=True)
    title = models.TextField(db_column='TITLE', blank=True, null=True)
    volume = models.CharField(db_column='VOLUME', max_length=10, blank=True, null=True)
    part = models.SmallIntegerField(db_column='PART', blank=True, null=True)
    number = models.SmallIntegerField(db_column='NUMBER', blank=True, null=True)
    pages = models.CharField(db_column='PAGES', max_length=20, blank=True, null=True)
    supplement = models.CharField(db_column='SUPPLEMENT', max_length=50, blank=True, null=True)
    edition = models.CharField(db_column='EDITION', max_length=10, blank=True, null=True)
    symposium_title = models.CharField(db_column='SYMPOSIUM_TITLE', max_length=50, blank=True, null=True)
    publisher = models.CharField(db_column='PUBLISHER', max_length=50, blank=True, null=True)
    place_of_publication = models.CharField(db_column='PLACE_OF_PUBLICATION', max_length=50, blank=True, null=True)
    reference_type = models.CharField(db_column='REFERENCE_TYPE', max_length=25)
    journal_key = models.ForeignKey(Journal, models.DO_NOTHING, db_column='JOURNAL_KEY', blank=True, null=True)
    original_file = models.TextField(db_column='ORIGINAL_FILE', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    physical_location = models.CharField(db_column='PHYSICAL_LOCATION', max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'REFERENCE'


class ReferenceAuthor(models.Model):
    author_key = FixedCharField(db_column='AUTHOR_KEY', primary_key=True, max_length=16)
    initials = FixedCharField(db_column='INITIALS', max_length=8, blank=True, null=True)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=50)
    source_key = models.ForeignKey(Reference, models.DO_NOTHING, db_column='SOURCE_KEY')
    sort_order = models.SmallIntegerField(db_column='SORT_ORDER')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')

    class Meta:
        managed = False
        db_table = 'REFERENCE_AUTHOR'


class ReferenceEditor(models.Model):
    editor_key = FixedCharField(db_column='EDITOR_KEY', primary_key=True, max_length=16)
    initials = FixedCharField(db_column='INITIALS', max_length=8, blank=True, null=True)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=50)
    source_key = models.ForeignKey(Reference, models.DO_NOTHING, db_column='SOURCE_KEY')
    sort_order = models.SmallIntegerField(db_column='SORT_ORDER')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'REFERENCE_EDITOR'


class ReferenceNumber(models.Model):
    number_key = FixedCharField(db_column='NUMBER_KEY', primary_key=True, max_length=16)
    number = models.CharField(db_column='NUMBER', max_length=20)
    source_key = models.ForeignKey(Reference, models.DO_NOTHING, db_column='SOURCE_KEY')
    reference_number_type = models.CharField(db_column='REFERENCE_NUMBER_TYPE', max_length=20)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')

    class Meta:
        managed = False
        db_table = 'REFERENCE_NUMBER'


class RelationshipType(models.Model):
    relationship_type_key = FixedCharField(db_column='RELATIONSHIP_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=40)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'RELATIONSHIP_TYPE'


class ReportAttribute(models.Model):
    report_attribute_key = FixedCharField(db_column='REPORT_ATTRIBUTE_KEY', primary_key=True, max_length=16)
    item_group = models.CharField(db_column='ITEM_GROUP', max_length=255, blank=True, null=True)
    source_table = models.CharField(db_column='SOURCE_TABLE', max_length=50, blank=True, null=True)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=50)
    attribute_sql = models.TextField(db_column='ATTRIBUTE_SQL')
    report_join_key = models.ForeignKey('ReportJoin', models.DO_NOTHING, db_column='REPORT_JOIN_KEY', blank=True, null=True)
    report_where_key = models.ForeignKey('ReportWhere', models.DO_NOTHING, db_column='REPORT_WHERE_KEY', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16, blank=True, null=True)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE', blank=True, null=True)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'REPORT_ATTRIBUTE'


class ReportField(models.Model):
    report_field_key = FixedCharField(db_column='REPORT_FIELD_KEY', primary_key=True, max_length=16)
    report_attribute_key = models.ForeignKey(ReportAttribute, models.DO_NOTHING, db_column='REPORT_ATTRIBUTE_KEY')
    field_item_name = models.CharField(db_column='FIELD_ITEM_NAME', max_length=50)
    field_type = models.CharField(db_column='FIELD_TYPE', max_length=15)
    field_size = models.IntegerField(db_column='FIELD_SIZE', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16, blank=True, null=True)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE', blank=True, null=True)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'REPORT_FIELD'


class ReportJoin(models.Model):
    report_join_key = FixedCharField(db_column='REPORT_JOIN_KEY', primary_key=True, max_length=16)
    join_sql = models.TextField(db_column='JOIN_SQL')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16, blank=True, null=True)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE', blank=True, null=True)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'REPORT_JOIN'


class ReportWhere(models.Model):
    report_where_key = FixedCharField(db_column='REPORT_WHERE_KEY', primary_key=True, max_length=16)
    where_sql = models.TextField(db_column='WHERE_SQL')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16, blank=True, null=True)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE', blank=True, null=True)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'REPORT_WHERE'


class ReferenceKeyword(models.Model):
    reference_keyword_key = FixedCharField(db_column='Reference_Keyword_Key', primary_key=True, max_length=16)
    source_key = models.ForeignKey(Reference, models.DO_NOTHING, db_column='Source_Key')
    concept_key = models.ForeignKey(Concept, models.DO_NOTHING, db_column='Concept_Key')
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'Reference_Keyword'


class ReferenceLocation(models.Model):
    reference_location_key = FixedCharField(db_column='Reference_Location_Key', primary_key=True, max_length=16)
    source_key = models.ForeignKey(Reference, models.DO_NOTHING, db_column='Source_Key')
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='Location_Key')
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Reference_Location'


class ReferenceSupplier(models.Model):
    reference_supplier_key = FixedCharField(db_column='Reference_Supplier_Key', primary_key=True, max_length=16)
    supplier_name_key = models.ForeignKey(Organisation, models.DO_NOTHING, db_column='Supplier_Name_Key')
    source_key = models.ForeignKey(Reference, models.DO_NOTHING, db_column='Source_Key')
    recommended = models.BooleanField(db_column='Recommended')
    location = models.CharField(db_column='Location', max_length=500, blank=True, null=True)
    media_concept_key = models.ForeignKey(Concept, models.DO_NOTHING, db_column='Media_Concept_Key', blank=True, null=True)
    format_concept_key = models.ForeignKey(Concept, models.DO_NOTHING, db_column='Format_Concept_Key', blank=True, null=True)
    availability_concept_key = models.ForeignKey(Concept, models.DO_NOTHING, db_column='Availability_Concept_Key', blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)
    custodian = FixedCharField(db_column='Custodian', max_length=8)

    class Meta:
        managed = False
        db_table = 'Reference_Supplier'


class ReferenceSurveyMetadata(models.Model):
    source_key = models.OneToOneField(Reference, models.DO_NOTHING, db_column='Source_Key', primary_key=True)
    commissioned_by_name_key = models.ForeignKey(Organisation, models.DO_NOTHING, db_column='Commissioned_By_Name_Key', blank=True, null=True)
    digitised = models.BooleanField(db_column='Digitised')
    digitisation_quality = models.SmallIntegerField(db_column='Digitisation_Quality', blank=True, null=True)
    gis_link_quality = models.SmallIntegerField(db_column='Gis_Link_Quality', blank=True, null=True)
    comments = models.CharField(db_column='Comments', max_length=2000, blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Reference_Survey_Metadata'


class RelationRoleType(models.Model):
    relation_role_type_key = FixedCharField(db_column='Relation_Role_Type_Key', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='Short_Name', max_length=30)
    long_name = models.CharField(db_column='Long_Name', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Relation_Role_Type'


class Sample(models.Model):
    sample_key = FixedCharField(db_column='SAMPLE_KEY', primary_key=True, max_length=16)
    sample_reference = models.CharField(db_column='SAMPLE_REFERENCE', max_length=15, blank=True, null=True)
    vague_date_start = models.IntegerField(db_column='VAGUE_DATE_START', blank=True, null=True)
    vague_date_end = models.IntegerField(db_column='VAGUE_DATE_END', blank=True, null=True)
    vague_date_type = models.CharField(db_column='VAGUE_DATE_TYPE', max_length=2)
    spatial_ref = models.CharField(db_column='SPATIAL_REF', max_length=40, blank=True, null=True)
    spatial_ref_system = models.CharField(db_column='SPATIAL_REF_SYSTEM', max_length=4, blank=True, null=True)
    lat = models.FloatField(db_column='LAT', blank=True, null=True)
    long = models.FloatField(db_column='LONG', blank=True, null=True)
    duration = models.CharField(db_column='DURATION', max_length=20, blank=True, null=True)
    time = models.DateTimeField(db_column='TIME', blank=True, null=True)
    outstanding_card = models.SmallIntegerField(db_column='OUTSTANDING_CARD')
    spatial_ref_qualifier = models.CharField(db_column='SPATIAL_REF_QUALIFIER', max_length=20, blank=True, null=True)
    sample_type_key = models.ForeignKey('SampleType', models.DO_NOTHING, db_column='SAMPLE_TYPE_KEY')
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY', blank=True, null=True)
    survey_event_key = models.ForeignKey('SurveyEvent', models.DO_NOTHING, db_column='SURVEY_EVENT_KEY')
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    recorders = models.CharField(db_column='RECORDERS', max_length=255, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    location_name = models.CharField(db_column='LOCATION_NAME', max_length=100, blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    private_location = models.CharField(db_column='PRIVATE_LOCATION', max_length=100, blank=True, null=True)
    private_code = models.CharField(db_column='PRIVATE_CODE', max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SAMPLE'


class SampleData(models.Model):
    sample_data_key = FixedCharField(db_column='SAMPLE_DATA_KEY', primary_key=True, max_length=16)
    data = models.CharField(db_column='DATA', max_length=20)
    accuracy = models.CharField(db_column='ACCURACY', max_length=20, blank=True, null=True)
    measurement_qualifier_key = models.ForeignKey(MeasurementQualifier, models.DO_NOTHING, db_column='MEASUREMENT_QUALIFIER_KEY')
    measurement_unit_key = models.ForeignKey(MeasurementUnit, models.DO_NOTHING, db_column='MEASUREMENT_UNIT_KEY')
    sample_key = models.ForeignKey(Sample, models.DO_NOTHING, db_column='SAMPLE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SAMPLE_DATA'


class SampleRecorder(models.Model):
    sample_key = models.OneToOneField(Sample, models.DO_NOTHING, db_column='SAMPLE_KEY', primary_key=True)
    se_recorder_key = models.ForeignKey('SurveyEventRecorder', models.DO_NOTHING, db_column='SE_RECORDER_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')

    class Meta:
        managed = False
        db_table = 'SAMPLE_RECORDER'
        unique_together = (('sample_key', 'se_recorder_key'),)


class SampleRelation(models.Model):
    sample_relation_key = FixedCharField(db_column='SAMPLE_RELATION_KEY', primary_key=True, max_length=16)
    sample_key_1 = models.ForeignKey(Sample, models.DO_NOTHING, db_column='SAMPLE_KEY_1')
    sample_key_2 = models.ForeignKey(Sample, models.DO_NOTHING, db_column='SAMPLE_KEY_2')
    description = FixedCharField(db_column='DESCRIPTION', max_length=16, blank=True, null=True)
    position_number = models.SmallIntegerField(db_column='POSITION_NUMBER', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SAMPLE_RELATION'


class SampleSources(models.Model):
    source_link_key = FixedCharField(db_column='SOURCE_LINK_KEY', primary_key=True, max_length=16)
    sample_key = models.ForeignKey(Sample, models.DO_NOTHING, db_column='SAMPLE_KEY')
    source_key = models.ForeignKey('Source', models.DO_NOTHING, db_column='SOURCE_KEY')
    original = models.BooleanField(db_column='ORIGINAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SAMPLE_SOURCES'


class SampleType(models.Model):
    sample_type_key = FixedCharField(db_column='SAMPLE_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    image = models.BinaryField(db_column='IMAGE', blank=True, null=True)
    recording_card = models.CharField(db_column='RECORDING_CARD', max_length=255, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SAMPLE_TYPE'


class Setting(models.Model):
    name = models.CharField(db_column='NAME', primary_key=True, max_length=10)
    data = models.CharField(db_column='DATA', max_length=250, blank=True, null=True)
    data_default = models.CharField(db_column='DATA_DEFAULT', max_length=250, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SETTING'


class SiteStatus(models.Model):
    site_status_key = FixedCharField(db_column='SITE_STATUS_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=40)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SITE_STATUS'


class Source(models.Model):
    source_key = FixedCharField(db_column='SOURCE_KEY', primary_key=True, max_length=16)
    internal = models.BooleanField(db_column='INTERNAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SOURCE'


class SourceFile(models.Model):
    source_key = models.OneToOneField(Source, models.DO_NOTHING, db_column='SOURCE_KEY', primary_key=True)
    file_name = models.CharField(db_column='FILE_NAME', max_length=255)
    title = models.CharField(db_column='TITLE', max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SOURCE_FILE'


class SpecialXmlElement(models.Model):
    name = models.CharField(db_column='NAME', primary_key=True, max_length=50)
    type = models.CharField(db_column='TYPE', max_length=1)
    data = models.TextField(db_column='DATA', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SPECIAL_XML_ELEMENT'
        unique_together = (('name', 'type'),)


class Specimen(models.Model):
    specimen_key = FixedCharField(db_column='SPECIMEN_KEY', primary_key=True, max_length=16)
    number = models.CharField(db_column='NUMBER', max_length=30, blank=True, null=True)
    accession_vague_date_start = models.IntegerField(db_column='ACCESSION_VAGUE_DATE_START', blank=True, null=True)
    accession_vague_date_end = models.IntegerField(db_column='ACCESSION_VAGUE_DATE_END', blank=True, null=True)
    accession_vague_date_type = models.CharField(db_column='ACCESSION_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    taxon_occurrence_key = models.ForeignKey('TaxonOccurrence', models.DO_NOTHING, db_column='TAXON_OCCURRENCE_KEY')
    specimen_type_key = models.ForeignKey('SpecimenType', models.DO_NOTHING, db_column='SPECIMEN_TYPE_KEY')
    location = models.CharField(db_column='LOCATION', max_length=100, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SPECIMEN'


class SpecimenType(models.Model):
    specimen_type_key = FixedCharField(db_column='SPECIMEN_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SPECIMEN_TYPE'


class Substrate(models.Model):
    substrate_key = FixedCharField(db_column='SUBSTRATE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SUBSTRATE'


class Survey(models.Model):
    survey_key = FixedCharField(db_column='SURVEY_KEY', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=100)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    from_vague_date_start = models.IntegerField(db_column='FROM_VAGUE_DATE_START', blank=True, null=True)
    from_vague_date_end = models.IntegerField(db_column='FROM_VAGUE_DATE_END', blank=True, null=True)
    from_vague_date_type = models.CharField(db_column='FROM_VAGUE_DATE_TYPE', max_length=2)
    to_vague_date_start = models.IntegerField(db_column='TO_VAGUE_DATE_START', blank=True, null=True)
    to_vague_date_end = models.IntegerField(db_column='TO_VAGUE_DATE_END', blank=True, null=True)
    to_vague_date_type = models.CharField(db_column='TO_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    sw_spatial_ref = models.CharField(db_column='SW_SPATIAL_REF', max_length=40, blank=True, null=True)
    ne_spatial_ref = models.CharField(db_column='NE_SPATIAL_REF', max_length=40, blank=True, null=True)
    spatial_ref_system = models.CharField(db_column='SPATIAL_REF_SYSTEM', max_length=4, blank=True, null=True)
    sw_lat = models.FloatField(db_column='SW_LAT', blank=True, null=True)
    sw_long = models.FloatField(db_column='SW_LONG', blank=True, null=True)
    ne_lat = models.FloatField(db_column='NE_LAT', blank=True, null=True)
    ne_long = models.FloatField(db_column='NE_LONG', blank=True, null=True)
    geographic_coverage = models.TextField(db_column='GEOGRAPHIC_COVERAGE', blank=True, null=True)
    periodicity = FixedCharField(db_column='PERIODICITY', max_length=16, blank=True, null=True)
    ne_spatial_ref_qualifier = models.CharField(db_column='NE_SPATIAL_REF_QUALIFIER', max_length=20, blank=True, null=True)
    sw_spatial_ref_qualifier = models.CharField(db_column='SW_SPATIAL_REF_QUALIFIER', max_length=20, blank=True, null=True)
    run_by = models.ForeignKey(Name, models.DO_NOTHING, db_column='RUN_BY')
    survey_status_key = models.ForeignKey('SurveyStatus', models.DO_NOTHING, db_column='SURVEY_STATUS_KEY', blank=True, null=True)
    survey_media_key = models.ForeignKey('SurveyMedia', models.DO_NOTHING, db_column='SURVEY_MEDIA_KEY')
    survey_type_key = models.ForeignKey('SurveyType', models.DO_NOTHING, db_column='SURVEY_TYPE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    op_from_vague_date_start = models.IntegerField(db_column='OP_FROM_VAGUE_DATE_START', blank=True, null=True)
    op_from_vague_date_end = models.IntegerField(db_column='OP_FROM_VAGUE_DATE_END', blank=True, null=True)
    op_from_vague_date_type = models.CharField(db_column='OP_FROM_VAGUE_DATE_Type', max_length=2, blank=True, null=True)
    op_to_vague_date_start = models.IntegerField(db_column='OP_TO_VAGUE_DATE_START', blank=True, null=True)
    op_to_vague_date_end = models.IntegerField(db_column='OP_TO_VAGUE_DATE_END', blank=True, null=True)
    op_to_vague_date_type = models.CharField(db_column='OP_TO_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    licence_key = models.ForeignKey(Licence, models.DO_NOTHING, db_column='LICENCE_KEY', blank=True, null=True)
    private_notes = models.TextField(db_column='PRIVATE_NOTES', blank=True, null=True)
    attribution = models.TextField(db_column='ATTRIBUTION', blank=True, null=True)
    import_date = models.DateTimeField(db_column='Import_Date', blank=True, null=True)
    temporary_survey = models.BooleanField(db_column='Temporary_Survey', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SURVEY'


class SurveyEvent(models.Model):
    survey_event_key = FixedCharField(db_column='SURVEY_EVENT_KEY', primary_key=True, max_length=16)
    survey_event_weather = models.CharField(db_column='SURVEY_EVENT_WEATHER', max_length=200, blank=True, null=True)
    spatial_ref = models.CharField(db_column='SPATIAL_REF', max_length=40, blank=True, null=True)
    spatial_ref_system = models.CharField(db_column='SPATIAL_REF_SYSTEM', max_length=4, blank=True, null=True)
    lat = models.FloatField(db_column='LAT', blank=True, null=True)
    long = models.FloatField(db_column='LONG', blank=True, null=True)
    spatial_ref_qualifier = models.CharField(db_column='SPATIAL_REF_QUALIFIER', max_length=20, blank=True, null=True)
    vague_date_start = models.IntegerField(db_column='VAGUE_DATE_START', blank=True, null=True)
    vague_date_end = models.IntegerField(db_column='VAGUE_DATE_END', blank=True, null=True)
    vague_date_type = models.CharField(db_column='VAGUE_DATE_TYPE', max_length=2)
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY', blank=True, null=True)
    survey_key = models.ForeignKey(Survey, models.DO_NOTHING, db_column='SURVEY_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    location_name = models.CharField(db_column='LOCATION_NAME', max_length=100, blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SURVEY_EVENT'


class SurveyEventOwner(models.Model):
    survey_event_owner_key = FixedCharField(db_column='SURVEY_EVENT_OWNER_KEY', primary_key=True, max_length=16)
    survey_event_key = models.ForeignKey(SurveyEvent, models.DO_NOTHING, db_column='SURVEY_EVENT_KEY')
    name_key = FixedCharField(db_column='NAME_KEY', max_length=16)
    survey_event_owner_type_key = models.ForeignKey('SurveyEventOwnerType', models.DO_NOTHING, db_column='SURVEY_EVENT_OWNER_TYPE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE', blank=True, null=True)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SURVEY_EVENT_OWNER'


class SurveyEventOwnerType(models.Model):
    survey_event_owner_type_key = FixedCharField(db_column='SURVEY_EVENT_OWNER_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=50)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SURVEY_EVENT_OWNER_TYPE'


class SurveyEventRecorder(models.Model):
    se_recorder_key = FixedCharField(db_column='SE_RECORDER_KEY', primary_key=True, max_length=16)
    name_key = models.ForeignKey(Name, models.DO_NOTHING, db_column='NAME_KEY')
    survey_event_key = models.ForeignKey(SurveyEvent, models.DO_NOTHING, db_column='SURVEY_EVENT_KEY')
    recorder_role_key = models.ForeignKey(RecorderRole, models.DO_NOTHING, db_column='RECORDER_ROLE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SURVEY_EVENT_RECORDER'


class SurveyEventSources(models.Model):
    source_link_key = FixedCharField(db_column='SOURCE_LINK_KEY', primary_key=True, max_length=16)
    survey_event_key = models.ForeignKey(SurveyEvent, models.DO_NOTHING, db_column='SURVEY_EVENT_KEY')
    source_key = models.ForeignKey(Source, models.DO_NOTHING, db_column='SOURCE_KEY')
    original = models.BooleanField(db_column='ORIGINAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SURVEY_EVENT_SOURCES'


class SurveyMedia(models.Model):
    survey_media_key = FixedCharField(db_column='SURVEY_MEDIA_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SURVEY_MEDIA'


class SurveySources(models.Model):
    source_link_key = FixedCharField(db_column='SOURCE_LINK_KEY', primary_key=True, max_length=16)
    survey_key = models.ForeignKey(Survey, models.DO_NOTHING, db_column='SURVEY_KEY')
    source_key = models.ForeignKey(Source, models.DO_NOTHING, db_column='SOURCE_KEY')
    original = models.BooleanField(db_column='ORIGINAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SURVEY_SOURCES'


class SurveyStatus(models.Model):
    survey_status_key = FixedCharField(db_column='SURVEY_STATUS_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SURVEY_STATUS'


class SurveyType(models.Model):
    survey_type_key = FixedCharField(db_column='SURVEY_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SURVEY_TYPE'


class SampleAdminAreas(models.Model):
    sample_admin_areas_key = FixedCharField(db_column='Sample_Admin_Areas_Key', primary_key=True, max_length=16)
    admin_area_key = models.ForeignKey(AdminArea, models.DO_NOTHING, db_column='Admin_Area_Key')
    sample_key = models.ForeignKey(Sample, models.DO_NOTHING, db_column='Sample_Key')
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Sample_Admin_Areas'


class SemanticRelation(models.Model):
    semantic_relation_key = FixedCharField(db_column='Semantic_Relation_Key', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='Item_Name', max_length=100)
    unidirectional = models.BooleanField(db_column='Unidirectional')
    forward_equivalence_possible = models.BooleanField(db_column='Forward_Equivalence_Possible')
    forward_equivalence_definite = models.BooleanField(db_column='Forward_Equivalence_Definite')
    reverse_equivalence_possible = models.BooleanField(db_column='Reverse_Equivalence_Possible')
    reverse_equivalence_definite = models.BooleanField(db_column='Reverse_Equivalence_Definite')
    proportional_relationship = models.BooleanField(db_column='Proportional_Relationship')
    adjacent = models.BooleanField(db_column='Adjacent', blank=True, null=True)
    chronological_overlap = models.SmallIntegerField(db_column='Chronological_Overlap', blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Semantic_Relation'


class Session(models.Model):
    session_id = FixedCharField(db_column='Session_ID', primary_key=True, max_length=16)
    user_name_key = FixedCharField(db_column='User_Name_Key', max_length=16)
    date_time_start = models.DateTimeField(db_column='Date_Time_Start')
    date_time_end = models.DateTimeField(db_column='Date_Time_End', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Session'


class SpatialReferenceSystem(models.Model):
    spatial_ref_system = models.CharField(db_column='Spatial_Ref_System', primary_key=True, max_length=4)
    projection = models.CharField(db_column='Projection', max_length=1000)

    class Meta:
        managed = False
        db_table = 'Spatial_Reference_System'


class SubjectArea(models.Model):
    subject_area_key = FixedCharField(db_column='Subject_Area_Key', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='Item_Name', max_length=100)
    comment = models.TextField(db_column='Comment', blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Subject_Area'


class SurveyTag(models.Model):
    survey_tag_key = FixedCharField(db_column='Survey_Tag_Key', primary_key=True, max_length=16)
    survey_key = models.ForeignKey(Survey, models.DO_NOTHING, db_column='Survey_Key')
    concept_key = models.ForeignKey(Concept, models.DO_NOTHING, db_column='Concept_Key')
    entered_session_id = FixedCharField(db_column='Entered_Session_Id', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_Id', max_length=16, blank=True, null=True)
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')

    class Meta:
        managed = False
        db_table = 'Survey_Tag'


class Taxon(models.Model):
    taxon_key = FixedCharField(db_column='TAXON_KEY', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=75, blank=True, null=True)
    authority = FixedCharField(db_column='AUTHORITY', max_length=80, blank=True, null=True)
    introduced_vague_date_start = models.IntegerField(db_column='INTRODUCED_VAGUE_DATE_START', blank=True, null=True)
    introduced_vague_date_end = models.IntegerField(db_column='INTRODUCED_VAGUE_DATE_END', blank=True, null=True)
    introduced_vague_date_type = models.CharField(db_column='INTRODUCED_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    language = models.CharField(db_column='LANGUAGE', max_length=2)
    taxon_name_type_key = models.ForeignKey('TaxonNameType', models.DO_NOTHING, db_column='TAXON_NAME_TYPE_KEY')
    abbreviation = models.CharField(db_column='ABBREVIATION', max_length=5, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16, blank=True, null=True)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON'


class TaxonBiotopeAssociation(models.Model):
    association_key = FixedCharField(db_column='ASSOCIATION_KEY', primary_key=True, max_length=16)
    association = models.CharField(db_column='ASSOCIATION', max_length=50)
    strength = models.CharField(db_column='STRENGTH', max_length=10, blank=True, null=True)
    geographic_context = models.CharField(db_column='GEOGRAPHIC_CONTEXT', max_length=100, blank=True, null=True)
    biotope_key = models.ForeignKey(Biotope, models.DO_NOTHING, db_column='BIOTOPE_KEY')
    taxon_version_key = models.ForeignKey('TaxonVersion', models.DO_NOTHING, db_column='TAXON_VERSION_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    source_key = FixedCharField(db_column='SOURCE_KEY', max_length=16, blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_BIOTOPE_ASSOCIATION'


class TaxonCommonName(models.Model):
    taxon_list_item_key = models.OneToOneField('TaxonListItem', models.DO_NOTHING, db_column='TAXON_LIST_ITEM_KEY', primary_key=True)
    taxon_version_key = models.ForeignKey('TaxonVersion', models.DO_NOTHING, db_column='TAXON_VERSION_KEY')

    class Meta:
        managed = False
        db_table = 'TAXON_COMMON_NAME'


class TaxonDesignation(models.Model):
    taxon_designation_key = FixedCharField(db_column='TAXON_DESIGNATION_KEY', primary_key=True, max_length=16)
    date_from = models.DateTimeField(db_column='DATE_FROM', blank=True, null=True)
    date_to = models.DateTimeField(db_column='DATE_TO', blank=True, null=True)
    status_geographic_area = models.CharField(db_column='STATUS_GEOGRAPHIC_AREA', max_length=100, blank=True, null=True)
    status_constraint = models.CharField(db_column='STATUS_CONSTRAINT', max_length=100, blank=True, null=True)
    detail = models.TextField(db_column='DETAIL', blank=True, null=True)
    taxon_designation_type_key = models.ForeignKey('TaxonDesignationType', models.DO_NOTHING, db_column='TAXON_DESIGNATION_TYPE_KEY', blank=True, null=True)
    taxon_list_item_key = models.ForeignKey('TaxonListItem', models.DO_NOTHING, db_column='TAXON_LIST_ITEM_KEY', blank=True, null=True)
    status_exclusion = models.BooleanField(db_column='STATUS_EXCLUSION')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    source_key = models.ForeignKey(Source, models.DO_NOTHING, db_column='SOURCE_KEY', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_DESIGNATION'


class TaxonDesignationType(models.Model):
    taxon_designation_type_key = FixedCharField(db_column='TAXON_DESIGNATION_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=40)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    kind = models.CharField(db_column='KIND', max_length=20, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    status_abbreviation = models.CharField(db_column='Status_Abbreviation', max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_DESIGNATION_TYPE'


class TaxonDetermination(models.Model):
    taxon_determination_key = FixedCharField(db_column='TAXON_DETERMINATION_KEY', primary_key=True, max_length=16)
    taxon_list_item_key = models.ForeignKey('TaxonListItem', models.DO_NOTHING, db_column='TAXON_LIST_ITEM_KEY')
    taxon_occurrence_key = models.ForeignKey('TaxonOccurrence', models.DO_NOTHING, db_column='TAXON_OCCURRENCE_KEY')
    vague_date_start = models.IntegerField(db_column='VAGUE_DATE_START', blank=True, null=True)
    vague_date_end = models.IntegerField(db_column='VAGUE_DATE_END', blank=True, null=True)
    vague_date_type = models.CharField(db_column='VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    preferred = models.BooleanField(db_column='PREFERRED')
    determiner = models.ForeignKey(Name, models.DO_NOTHING, db_column='DETERMINER')
    determination_type_key = models.ForeignKey(DeterminationType, models.DO_NOTHING, db_column='DETERMINATION_TYPE_KEY')
    determiner_role_key = models.ForeignKey(DeterminerRole, models.DO_NOTHING, db_column='DETERMINER_ROLE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    source_key = models.ForeignKey(Source, models.DO_NOTHING, db_column='SOURCE_KEY', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_DETERMINATION'


class TaxonFact(models.Model):
    taxon_fact_key = FixedCharField(db_column='TAXON_FACT_KEY', primary_key=True, max_length=16)
    title = models.CharField(db_column='TITLE', max_length=50, blank=True, null=True)
    type = models.CharField(db_column='TYPE', max_length=1)
    data = models.TextField(db_column='DATA')
    taxon_version_key = models.ForeignKey('TaxonVersion', models.DO_NOTHING, db_column='TAXON_VERSION_KEY', blank=True, null=True)
    fact_vague_date_start = models.IntegerField(db_column='FACT_VAGUE_DATE_START', blank=True, null=True)
    fact_vague_date_end = models.IntegerField(db_column='FACT_VAGUE_DATE_END', blank=True, null=True)
    fact_vague_date_type = models.CharField(db_column='FACT_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    source_key = models.ForeignKey(Source, models.DO_NOTHING, db_column='SOURCE_KEY', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_FACT'


class TaxonGroup(models.Model):
    taxon_group_key = FixedCharField(db_column='TAXON_GROUP_KEY', primary_key=True, max_length=16)
    taxon_group_name = models.CharField(db_column='TAXON_GROUP_NAME', max_length=50)
    sort_order = models.IntegerField(db_column='SORT_ORDER', blank=True, null=True)
    use_taxon_list_key = models.ForeignKey('TaxonList', models.DO_NOTHING, db_column='USE_TAXON_LIST_KEY', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_GROUP'


class TaxonList(models.Model):
    taxon_list_key = FixedCharField(db_column='TAXON_LIST_KEY', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='ITEM_NAME', max_length=200)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    authority = models.CharField(db_column='AUTHORITY', max_length=50, blank=True, null=True)
    taxon_list_type_key = models.ForeignKey('TaxonListType', models.DO_NOTHING, db_column='TAXON_LIST_TYPE_KEY', blank=True, null=True)
    local_disk = models.BooleanField(db_column='LOCAL_DISK')
    update_mechanism = models.CharField(db_column='UPDATE_MECHANISM', max_length=150, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    preferred = models.BooleanField(db_column='PREFERRED')
    priority = models.IntegerField(db_column='PRIORITY', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_LIST'


class TaxonListItem(models.Model):
    taxon_list_item_key = FixedCharField(db_column='TAXON_LIST_ITEM_KEY', primary_key=True, max_length=16)
    taxon_version_key = models.ForeignKey('TaxonVersion', models.DO_NOTHING, db_column='TAXON_VERSION_KEY')
    taxon_list_version_key = models.ForeignKey('TaxonListVersion', models.DO_NOTHING, db_column='TAXON_LIST_VERSION_KEY')
    taxon_list_version_to = FixedCharField(db_column='TAXON_LIST_VERSION_TO', max_length=16, blank=True, null=True)
    preferred_name = models.ForeignKey('self', models.DO_NOTHING, db_column='PREFERRED_NAME')
    sort_code = models.IntegerField(db_column='SORT_CODE', blank=True, null=True)
    lst_itm_code = models.CharField(db_column='LST_ITM_CODE', max_length=35, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, db_column='PARENT', blank=True, null=True)
    taxon_rank_key = models.ForeignKey('TaxonRank', models.DO_NOTHING, db_column='TAXON_RANK_KEY')
    code_source = FixedCharField(db_column='CODE_SOURCE', max_length=16, blank=True, null=True)
    note = models.CharField(db_column='NOTE', max_length=50, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_LIST_ITEM'


class TaxonListType(models.Model):
    taxon_list_type_key = FixedCharField(db_column='TAXON_LIST_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    schedule = models.BooleanField(db_column='SCHEDULE')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    allow_data_entry = models.BooleanField(db_column='Allow_Data_Entry')

    class Meta:
        managed = False
        db_table = 'TAXON_LIST_TYPE'


class TaxonListVersion(models.Model):
    taxon_list_version_key = FixedCharField(db_column='TAXON_LIST_VERSION_KEY', primary_key=True, max_length=16)
    taxon_list_key = models.ForeignKey(TaxonList, models.DO_NOTHING, db_column='TAXON_LIST_KEY', blank=True, null=True)
    version = models.IntegerField(db_column='VERSION', blank=True, null=True)
    authority = models.CharField(db_column='AUTHORITY', max_length=50, blank=True, null=True)
    vague_date_start = models.IntegerField(db_column='VAGUE_DATE_START', blank=True, null=True)
    vague_date_end = models.IntegerField(db_column='VAGUE_DATE_END', blank=True, null=True)
    vague_date_type = models.CharField(db_column='VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    version_is_amendment = models.BooleanField(db_column='VERSION_IS_AMENDMENT')
    quality = models.TextField(db_column='QUALITY', blank=True, null=True)
    source_key = FixedCharField(db_column='SOURCE_KEY', max_length=16, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_LIST_VERSION'


class TaxonNameType(models.Model):
    taxon_name_type_key = FixedCharField(db_column='TAXON_NAME_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    authority = models.CharField(db_column='AUTHORITY', max_length=50, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_NAME_TYPE'


class TaxonOccurrence(models.Model):
    taxon_occurrence_key = FixedCharField(db_column='TAXON_OCCURRENCE_KEY', primary_key=True, max_length=16)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    zero_abundance = models.BooleanField(db_column='ZERO_ABUNDANCE')
    confidential = models.BooleanField(db_column='CONFIDENTIAL')
    verified = models.SmallIntegerField(db_column='VERIFIED')
    checked = models.BooleanField(db_column='CHECKED')
    checked_by = FixedCharField(db_column='CHECKED_BY', max_length=16, blank=True, null=True)
    checked_date = models.DateTimeField(db_column='CHECKED_DATE', blank=True, null=True)
    surveyors_ref = models.CharField(db_column='SURVEYORS_REF', max_length=30, blank=True, null=True)
    provenance = FixedCharField(db_column='PROVENANCE', max_length=16, blank=True, null=True)
    sample_key = models.ForeignKey(Sample, models.DO_NOTHING, db_column='SAMPLE_KEY')
    substrate_key = models.ForeignKey(Substrate, models.DO_NOTHING, db_column='SUBSTRATE_KEY', blank=True, null=True)
    record_type_key = models.ForeignKey(RecordType, models.DO_NOTHING, db_column='RECORD_TYPE_KEY', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_OCCURRENCE'


class TaxonOccurrenceData(models.Model):
    taxon_occurrence_data_key = FixedCharField(db_column='TAXON_OCCURRENCE_DATA_KEY', primary_key=True, max_length=16)
    taxon_occurrence_key = models.ForeignKey(TaxonOccurrence, models.DO_NOTHING, db_column='TAXON_OCCURRENCE_KEY')
    data = models.CharField(db_column='DATA', max_length=20)
    accuracy = models.CharField(db_column='ACCURACY', max_length=20, blank=True, null=True)
    measurement_qualifier_key = models.ForeignKey(MeasurementQualifier, models.DO_NOTHING, db_column='MEASUREMENT_QUALIFIER_KEY')
    measurement_unit_key = models.ForeignKey(MeasurementUnit, models.DO_NOTHING, db_column='MEASUREMENT_UNIT_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_OCCURRENCE_DATA'


class TaxonOccurrenceRelation(models.Model):
    taxon_occurrence_relation_key = FixedCharField(db_column='TAXON_OCCURRENCE_RELATION_KEY', primary_key=True, max_length=16)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    taxon_occurrence_key_1 = models.ForeignKey(TaxonOccurrence, models.DO_NOTHING, db_column='TAXON_OCCURRENCE_KEY_1')
    taxon_occurrence_key_2 = models.ForeignKey(TaxonOccurrence, models.DO_NOTHING, db_column='TAXON_OCCURRENCE_KEY_2')
    relationship_type_key = models.ForeignKey(RelationshipType, models.DO_NOTHING, db_column='RELATIONSHIP_TYPE_KEY')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_OCCURRENCE_RELATION'


class TaxonOccurrenceSources(models.Model):
    source_link_key = FixedCharField(db_column='SOURCE_LINK_KEY', primary_key=True, max_length=16)
    taxon_occurrence_key = models.ForeignKey(TaxonOccurrence, models.DO_NOTHING, db_column='TAXON_OCCURRENCE_KEY')
    source_key = models.ForeignKey(Source, models.DO_NOTHING, db_column='SOURCE_KEY')
    original = models.BooleanField(db_column='ORIGINAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_OCCURRENCE_SOURCES'


class TaxonRank(models.Model):
    taxon_rank_key = FixedCharField(db_column='TAXON_RANK_KEY', primary_key=True, max_length=16)
    sequence = models.SmallIntegerField(db_column='SEQUENCE', blank=True, null=True)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    list_font_italic = models.BooleanField(db_column='LIST_FONT_ITALIC')
    image = models.BinaryField(db_column='IMAGE', blank=True, null=True)
    display_in_details = models.BooleanField(db_column='DISPLAY_IN_DETAILS')
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_RANK'


class TaxonSources(models.Model):
    source_link_key = FixedCharField(db_column='SOURCE_LINK_KEY', primary_key=True, max_length=16)
    taxon_key = models.ForeignKey(Taxon, models.DO_NOTHING, db_column='TAXON_KEY')
    source_key = models.ForeignKey(Source, models.DO_NOTHING, db_column='SOURCE_KEY')
    original = models.BooleanField(db_column='ORIGINAL')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_SOURCES'


class TaxonTaxonAssociation(models.Model):
    association_key = FixedCharField(db_column='ASSOCIATION_KEY', primary_key=True, max_length=16)
    taxon_version_key_1 = models.ForeignKey('TaxonVersion', models.DO_NOTHING, db_column='TAXON_VERSION_KEY_1')
    taxon_version_key_2 = models.ForeignKey('TaxonVersion', models.DO_NOTHING, db_column='TAXON_VERSION_KEY_2')
    association = models.CharField(db_column='ASSOCIATION', max_length=50)
    geographic_context = models.CharField(db_column='GEOGRAPHIC_CONTEXT', max_length=100, blank=True, null=True)
    comment = models.CharField(db_column='COMMENT', max_length=50, blank=True, null=True)
    vague_date_start = models.IntegerField(db_column='VAGUE_DATE_START', blank=True, null=True)
    vague_date_end = models.IntegerField(db_column='VAGUE_DATE_END', blank=True, null=True)
    vague_date_type = models.CharField(db_column='VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_TAXON_ASSOCIATION'


class TaxonUserName(models.Model):
    taxon_user_name_key = FixedCharField(db_column='TAXON_USER_NAME_KEY', primary_key=True, max_length=16)
    taxon_list_item_key = models.ForeignKey(TaxonListItem, models.DO_NOTHING, db_column='TAXON_LIST_ITEM_KEY')
    item_name = models.CharField(db_column='ITEM_NAME', max_length=60, blank=True, null=True)
    preferred = models.BooleanField(db_column='PREFERRED', blank=True, null=True)
    language = models.CharField(db_column='LANGUAGE', max_length=2, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_USER_NAME'


class TaxonVersion(models.Model):
    taxon_version_key = FixedCharField(db_column='TAXON_VERSION_KEY', primary_key=True, max_length=16)
    taxon_key = models.ForeignKey(Taxon, models.DO_NOTHING, db_column='TAXON_KEY', blank=True, null=True)
    attribute = models.CharField(db_column='ATTRIBUTE', max_length=65, blank=True, null=True)
    authority = models.CharField(db_column='AUTHORITY', max_length=40, blank=True, null=True)
    date_from = models.DateTimeField(db_column='DATE_FROM', blank=True, null=True)
    date_to = models.DateTimeField(db_column='DATE_TO', blank=True, null=True)
    comment = models.TextField(db_column='COMMENT', blank=True, null=True)
    validation_level = models.SmallIntegerField(db_column='VALIDATION_LEVEL', blank=True, null=True)
    uk_native = models.BooleanField(db_column='UK_NATIVE')
    quality = models.CharField(db_column='QUALITY', max_length=50, blank=True, null=True)
    source_key = FixedCharField(db_column='SOURCE_KEY', max_length=16, blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)
    output_group_key = models.ForeignKey(TaxonGroup, models.DO_NOTHING, db_column='OUTPUT_GROUP_KEY', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_VERSION'


class TaxonVersionRelation(models.Model):
    taxon_version_relation_key = FixedCharField(db_column='TAXON_VERSION_RELATION_KEY', primary_key=True, max_length=16)
    taxon_version_key_1 = models.ForeignKey(TaxonVersion, models.DO_NOTHING, db_column='TAXON_VERSION_KEY_1')
    taxon_version_key_2 = models.ForeignKey(TaxonVersion, models.DO_NOTHING, db_column='TAXON_VERSION_KEY_2')
    relationship = models.CharField(db_column='RELATIONSHIP', max_length=50)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TAXON_VERSION_RELATION'


class Tenure(models.Model):
    tenure_key = FixedCharField(db_column='TENURE_KEY', primary_key=True, max_length=16)
    from_vague_date_start = models.IntegerField(db_column='FROM_VAGUE_DATE_START', blank=True, null=True)
    from_vague_date_end = models.IntegerField(db_column='FROM_VAGUE_DATE_END', blank=True, null=True)
    from_vague_date_type = models.CharField(db_column='FROM_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    to_vague_date_start = models.IntegerField(db_column='TO_VAGUE_DATE_START', blank=True, null=True)
    to_vague_date_end = models.IntegerField(db_column='TO_VAGUE_DATE_END', blank=True, null=True)
    to_vague_date_type = models.CharField(db_column='TO_VAGUE_DATE_TYPE', max_length=2, blank=True, null=True)
    owned_by = models.ForeignKey(Name, models.DO_NOTHING, db_column='OWNED_BY', blank=True, null=True)
    tenure_type_key = models.ForeignKey('TenureType', models.DO_NOTHING, db_column='TENURE_TYPE_KEY', blank=True, null=True)
    location_key = models.ForeignKey(Location, models.DO_NOTHING, db_column='LOCATION_KEY', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TENURE'


class TenureType(models.Model):
    tenure_type_key = FixedCharField(db_column='TENURE_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TENURE_TYPE'


class TermList(models.Model):
    table = models.CharField(db_column='TABLE', primary_key=True, max_length=30)
    key_field = models.CharField(db_column='KEY_FIELD', max_length=30)
    description = models.CharField(db_column='DESCRIPTION', max_length=50)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    additional_fields = models.BooleanField(db_column='ADDITIONAL_FIELDS')
    linked_table = models.CharField(db_column='LINKED_TABLE', max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'TERM_LIST'


class ThreatType(models.Model):
    threat_type_key = FixedCharField(db_column='THREAT_TYPE_KEY', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='SHORT_NAME', max_length=20)
    long_name = models.CharField(db_column='LONG_NAME', max_length=100, blank=True, null=True)
    description = models.TextField(db_column='DESCRIPTION', blank=True, null=True)
    entered_by = FixedCharField(db_column='ENTERED_BY', max_length=16)
    entry_date = models.DateTimeField(db_column='ENTRY_DATE')
    changed_by = FixedCharField(db_column='CHANGED_BY', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='CHANGED_DATE', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='SYSTEM_SUPPLIED_DATA')
    custodian = FixedCharField(db_column='CUSTODIAN', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'THREAT_TYPE'


class TaxonDesignationSet(models.Model):
    taxon_designation_set_key = FixedCharField(db_column='Taxon_Designation_Set_Key', primary_key=True, max_length=16)
    title = models.CharField(db_column='Title', max_length=100)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=16, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Taxon_Designation_Set'


class TaxonDesignationSetItem(models.Model):
    taxon_designation_set_item_key = FixedCharField(db_column='Taxon_Designation_Set_Item_Key', primary_key=True, max_length=16)
    taxon_designation_set_key = models.ForeignKey(TaxonDesignationSet, models.DO_NOTHING, db_column='Taxon_Designation_Set_Key', blank=True, null=True)
    taxon_designation_type_key = models.ForeignKey(TaxonDesignationType, models.DO_NOTHING, db_column='Taxon_Designation_Type_Key', blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=16, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Taxon_Designation_Set_Item'


class TaxonOccurrenceExtRef(models.Model):
    taxon_occurrence_ext_ref_key = FixedCharField(db_column='Taxon_Occurrence_Ext_Ref_Key', primary_key=True, max_length=16)
    taxon_occurrence_key = FixedCharField(db_column='Taxon_Occurrence_Key', max_length=16)
    external_key = models.CharField(db_column='External_Key', max_length=30)
    date_imported = models.DateTimeField(db_column='Date_Imported')

    class Meta:
        managed = False
        db_table = 'Taxon_Occurrence_Ext_Ref'


class TaxonPrivateData(models.Model):
    taxon_private_data_key = FixedCharField(db_column='Taxon_Private_Data_Key', primary_key=True, max_length=16)
    taxon_occurrence_key = models.ForeignKey(TaxonOccurrence, models.DO_NOTHING, db_column='Taxon_Occurrence_Key')
    taxon_private_type_key = models.ForeignKey('TaxonPrivateType', models.DO_NOTHING, db_column='Taxon_Private_Type_Key')
    item_name = models.CharField(db_column='Item_Name', max_length=30)
    detail = models.CharField(db_column='Detail', max_length=100, blank=True, null=True)
    item_date = models.DateTimeField(db_column='Item_Date', blank=True, null=True)
    item_value = FixedCharField(db_column='Item_Value', max_length=16, blank=True, null=True)
    comment = models.TextField(db_column='Comment', blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_by', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Taxon_Private_Data'


class TaxonPrivateType(models.Model):
    taxon_private_type_key = FixedCharField(db_column='Taxon_Private_Type_Key', primary_key=True, max_length=16)
    short_name = models.CharField(db_column='Short_Name', max_length=30)
    long_name = models.CharField(db_column='Long_Name', max_length=100, blank=True, null=True)
    entered_by = FixedCharField(db_column='Entered_By', max_length=16)
    entry_date = models.DateTimeField(db_column='Entry_Date')
    changed_by = FixedCharField(db_column='Changed_By', max_length=16, blank=True, null=True)
    changed_date = models.DateTimeField(db_column='Changed_Date', blank=True, null=True)
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data', blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Taxon_Private_Type'


class Term(models.Model):
    term_key = FixedCharField(db_column='Term_Key', primary_key=True, max_length=16)
    language_key = models.CharField(db_column='Language_Key', max_length=4)
    item_name = models.CharField(db_column='Item_Name', max_length=150)
    plaintext = models.CharField(db_column='Plaintext', max_length=150)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Term'
        unique_together = (('language_key', 'item_name'),)


class TermVersion(models.Model):
    term_version_key = FixedCharField(db_column='Term_Version_Key', primary_key=True, max_length=16)
    term_key = models.ForeignKey(Term, models.DO_NOTHING, db_column='Term_Key')
    version_label = models.CharField(db_column='Version_Label', max_length=100, blank=True, null=True)
    author_and_date = models.CharField(db_column='Author_And_Date', max_length=100, blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Term_Version'


class TermVersionRelation(models.Model):
    term_version_relation_key = FixedCharField(db_column='Term_Version_Relation_Key', primary_key=True, max_length=16)
    from_term_version_key = models.ForeignKey(TermVersion, models.DO_NOTHING, db_column='From_Term_Version_Key')
    to_term_version_key = models.ForeignKey(TermVersion, models.DO_NOTHING, db_column='To_Term_Version_Key')
    from_concept_key = FixedCharField(db_column='From_Concept_Key', max_length=16, blank=True, null=True)
    to_concept_key = FixedCharField(db_column='To_Concept_Key', max_length=16, blank=True, null=True)
    thesaurus_relation_type_key = models.ForeignKey('ThesaurusRelationType', models.DO_NOTHING, db_column='Thesaurus_Relation_Type_Key')
    multiplicity = models.FloatField(db_column='Multiplicity', blank=True, null=True)
    comment = models.TextField(db_column='Comment', blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Term_Version_Relation'


class ThesaurusFact(models.Model):
    thesaurus_fact_key = FixedCharField(db_column='Thesaurus_Fact_Key', primary_key=True, max_length=16)
    item_name = models.CharField(db_column='Item_Name', max_length=100)
    data = models.TextField(db_column='Data')
    meaning_key = FixedCharField(db_column='Meaning_Key', max_length=16, blank=True, null=True)
    concept_key = FixedCharField(db_column='Concept_Key', max_length=16, blank=True, null=True)
    term_version_key = FixedCharField(db_column='Term_Version_Key', max_length=16, blank=True, null=True)
    related_term_versions = models.BooleanField(db_column='Related_Term_Versions')
    inherited = models.BooleanField(db_column='Inherited')
    language_key = models.CharField(db_column='Language_Key', max_length=4)
    fact_vague_date_start = models.IntegerField(db_column='Fact_Vague_Date_Start', blank=True, null=True)
    fact_vague_date_end = models.IntegerField(db_column='Fact_Vague_Date_End', blank=True, null=True)
    fact_vague_date_type = models.CharField(db_column='Fact_Vague_Date_Type', max_length=2)
    fact_type_concept_key = FixedCharField(db_column='Fact_Type_Concept_Key', max_length=16)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Thesaurus_Fact'


class ThesaurusRelationType(models.Model):
    thesaurus_relation_type_key = FixedCharField(db_column='Thesaurus_Relation_Type_Key', primary_key=True, max_length=16)
    semantic_relation_key = models.ForeignKey(SemanticRelation, models.DO_NOTHING, db_column='Semantic_Relation_Key')
    item_name = models.CharField(db_column='Item_Name', max_length=100)
    forward_term = models.CharField(db_column='Forward_Term', max_length=100)
    reverse_term = models.CharField(db_column='Reverse_Term', max_length=100, blank=True, null=True)
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Thesaurus_Relation_Type'


class ThesaurusRelationTypeUsage(models.Model):
    thesaurus_relation_type_usage_key = FixedCharField(db_column='Thesaurus_Relation_Type_Usage_Key', primary_key=True, max_length=16)
    thesaurus_relation_type_key = models.ForeignKey(ThesaurusRelationType, models.DO_NOTHING, db_column='Thesaurus_Relation_Type_Key')
    relation_usage = models.SmallIntegerField(db_column='Relation_Usage')
    entered_session_id = FixedCharField(db_column='Entered_Session_ID', max_length=16)
    changed_session_id = FixedCharField(db_column='Changed_Session_ID', max_length=16, blank=True, null=True)
    system_supplied_data = models.BooleanField(db_column='System_Supplied_Data')
    custodian = FixedCharField(db_column='Custodian', max_length=8, blank=True, null=True)
    timestamp = models.TextField(db_column='Timestamp')

    class Meta:
        managed = False
        db_table = 'Thesaurus_Relation_Type_Usage'


class UsableField(models.Model):
    usable_field_key = FixedCharField(db_column='USABLE_FIELD_KEY', primary_key=True, max_length=16)
    table_name = models.CharField(db_column='TABLE_NAME', max_length=30)
    field_name = models.CharField(db_column='FIELD_NAME', max_length=30)
    field_description = models.CharField(db_column='FIELD_DESCRIPTION', max_length=70)
    field_type = models.CharField(db_column='FIELD_TYPE', max_length=50, blank=True, null=True)
    apply_to = models.CharField(db_column='APPLY_TO', max_length=1, blank=True, null=True)
    selectable = models.BooleanField(db_column='SELECTABLE')
    sortable = models.BooleanField(db_column='SORTABLE')
    filterable = models.BooleanField(db_column='FILTERABLE')
    calculation_sql = models.TextField(db_column='CALCULATION_SQL', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'USABLE_FIELD'


class UsableTable(models.Model):
    usable_table_key = FixedCharField(db_column='USABLE_TABLE_KEY', primary_key=True, max_length=16)
    table_name = models.CharField(db_column='TABLE_NAME', max_length=30, blank=True, null=True)
    link_table = models.CharField(db_column='LINK_TABLE', max_length=30, blank=True, null=True)
    link = models.CharField(db_column='LINK', max_length=255, blank=True, null=True)
    additional_link = models.CharField(db_column='ADDITIONAL_LINK', max_length=255, blank=True, null=True)
    apply_to = models.CharField(db_column='APPLY_TO', max_length=1, blank=True, null=True)
    join_order = models.SmallIntegerField(db_column='JOIN_ORDER', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'USABLE_TABLE'

class UserSurveyRestriction(models.Model):
    user_survey_restriction_key = FixedCharField(db_column='User_Survey_Restriction_Key', primary_key=True, max_length=16)
    name_key = models.ForeignKey(User, models.DO_NOTHING, db_column='Name_Key', blank=True, null=True)
    survey_key = models.ForeignKey(Survey, models.DO_NOTHING, db_column='Survey_Key', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'User_Survey_Restriction'


class Dtproperties(models.Model):
    objectid = models.IntegerField(blank=True, null=True)
    property = models.CharField(max_length=64)
    value = models.CharField(max_length=255, blank=True, null=True)
    uvalue = models.CharField(max_length=255, blank=True, null=True)
    lvalue = models.BinaryField(blank=True, null=True)
    version = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'dtproperties'
        unique_together = (('id', 'property'),)
